[
    {
        "method_id": 4670,
        "comment_1": " Returns the Euclidean distance between a specified point and this point.  @param pt the second point.  return the Euclidean distance between a specified point and this point. ",
        "method": "\nMethod:\n double distance(Point2D){\n    // Distance Between X Coordinates\n    final double x_distance = (pt.getX() - x) * (pt.getX() - x);\n    // Distance Between Y Coordinates\n    final double y_distance = (pt.getY() - y) * (pt.getY() - y);\n    // Distance Between 2d Points\n    return Math.sqrt(x_distance + y_distance);\n}\nComment:\n",
        "project": "aimacode",
        "key": "aimacode_4670",
        "comment_2": " Calculates the Euclidean distance between the current point and the specified Point2D object.   It uses the Pythagorean theorem to compute the distance based on the differences in the X and Y coordinates.   @param pt the Point2D object to which the distance is calculated.  return the distance between the current point and the specified Point2D. ",
        "comment_3": " Calculates the Euclidean distance between the current point and another specified point.  Utilizes the Pythagorean theorem to determine the distance in a 2D plane.  @param pt the point to which the distance is calculated.  return the distance between the current point and the specified point. ",
        "comment_4": " Calculates the Euclidean distance between the current point and another specified Point2D object.  The method returns the distance as a double value. ",
        "comment_5": " Calculates the Euclidean distance between the current point and another specified point in 2D space.   Utilizes the Pythagorean theorem to determine the distance based on the X and Y coordinates of the points.   @param pt the point to which the distance is calculated.  return the distance between the current point and the specified point. ",
        "comment_6": "Calculates the Euclidean distance between this point and another point. The distance is calculated using the Pythagorean theorem, where the square root of the sum of the squared differences in x and y coordinates is returned.",
        "comment_7": "Calculates the Euclidean distance between this point and the specified point. The distance is calculated using the Pythagorean theorem.",
        "comment_8": "Calculates the Euclidean distance between this point and the given Point2D. The distance is calculated using the Pythagorean theorem.",
        "comment_9": "Calculates the Euclidean distance between this point and another point. The distance is computed using the Pythagorean theorem, where the square root of the sum of squared differences in x and y coordinates represents the distance.",
        "comment_10": " Calculates the Euclidean distance between the current point and the given point. ",
        "comment_11": " Calculates the Euclidean distance between the current point and the given point.  The distance is calculated as the square root of the sum of the squares of the differences in x and y coordinates. ",
        "comment_12": " Calculates the Euclidean distance between the current point and the given point.  The distance is calculated using the formula sqrt((x2-x1)^2 + (y2-y1)^2).  The result is returned as a double value. ",
        "comment_13": " Calculates the Euclidean distance between the current point and the given point. "
    },
    {
        "method_id": 6445,
        "comment_1": " Returns the contents of this instance as a @code .dex file,  in a @link ByteArrayAnnotatedOutput instance.   @param annotate whether or not to keep annotations  @param verbose if annotating, whether to be verbose  return @code non-null; a @code .dex file for this instance ",
        "method": "\nMethod:\n ByteArrayAnnotatedOutput toDex0(boolean, boolean){\n    /*\n         * The following is ordered so that the prepare() calls which\n         * add items happen before the calls to the sections that get\n         * added to.\n         */\n    classDefs.prepare();\n    classData.prepare();\n    wordData.prepare();\n    byteData.prepare();\n    methodIds.prepare();\n    fieldIds.prepare();\n    protoIds.prepare();\n    typeLists.prepare();\n    typeIds.prepare();\n    stringIds.prepare();\n    stringData.prepare();\n    header.prepare();\n    // Place the sections within the file.\n    int count = sections.length;\n    int offset = 0;\n    for (int i = 0; i < count; i++) {\n        Section one = sections[i];\n        int placedAt = one.setFileOffset(offset);\n        if (placedAt < offset) {\n            throw new RuntimeException(\"bogus placement for section \" + i);\n        }\n        try {\n            if (one == map) {\n                /*\n                     * Inform the map of all the sections, and add it\n                     * to the file. This can only be done after all\n                     * the other items have been sorted and placed.\n                     */\n                MapItem.addMap(sections, map);\n                map.prepare();\n            }\n            if (one instanceof MixedItemSection) {\n                /*\n                     * Place the items of a MixedItemSection that just\n                     * got placed.\n                     */\n                ((MixedItemSection) one).placeItems();\n            }\n            offset = placedAt + one.writeSize();\n        } catch (RuntimeException ex) {\n            throw ExceptionWithContext.withContext(ex, \"...while writing section \" + i);\n        }\n    }\n    // Write out all the sections.\n    fileSize = offset;\n    byte[] barr = new byte[fileSize];\n    ByteArrayAnnotatedOutput out = new ByteArrayAnnotatedOutput(barr);\n    if (annotate) {\n        out.enableAnnotations(dumpWidth, verbose);\n    }\n    for (int i = 0; i < count; i++) {\n        try {\n            Section one = sections[i];\n            int zeroCount = one.getFileOffset() - out.getCursor();\n            if (zeroCount < 0) {\n                throw new ExceptionWithContext(\"excess write of \" + (-zeroCount));\n            }\n            out.writeZeroes(one.getFileOffset() - out.getCursor());\n            one.writeTo(out);\n        } catch (RuntimeException ex) {\n            ExceptionWithContext ec;\n            if (ex instanceof ExceptionWithContext) {\n                ec = (ExceptionWithContext) ex;\n            } else {\n                ec = new ExceptionWithContext(ex);\n            }\n            ec.addContext(\"...while writing section \" + i);\n            throw ec;\n        }\n    }\n    if (out.getCursor() != fileSize) {\n        throw new RuntimeException(\"foreshortened write\");\n    }\n    // Perform final bookkeeping.\n    calcSignature(barr);\n    calcChecksum(barr);\n    if (annotate) {\n        wordData.writeIndexAnnotation(out, ItemType.TYPE_CODE_ITEM, \"\\nmethod code index:\\n\\n\");\n        getStatistics().writeAnnotation(out);\n        out.finishAnnotating();\n    }\n    return out;\n}\nComment:\n",
        "project": "alibaba",
        "key": "alibaba_6445",
        "comment_2": "java Converts the current state to a DEX file format, preparing and placing all sections,  writing them to a byte array, and performing final bookkeeping such as calculating  the signature and checksum. Optionally, it can enable annotations for the output.   @param annotate whether to enable annotations  @param verbose whether to use verbose annotations  return a ByteArrayAnnotatedOutput containing the DEX file data ",
        "comment_3": "java Converts the current state to a Dex file format, preparing and placing all sections,  and writing them to a byte array. It also handles annotations and final bookkeeping  such as calculating the signature and checksum. ",
        "comment_4": " Converts the current state of the object into a DEX file format, preparing and placing all sections,  and then writing them to a byte array. It also handles annotations, calculates the signature and checksum,  and performs final bookkeeping before returning the output. ",
        "comment_5": " Converts the current state of the object into a DEX file format, preparing and placing various sections, and then writing them to a byte array. It handles the placement of sections, writes them to the output, and performs final bookkeeping such as calculating the signature and checksum. If annotation is enabled, it also writes index annotations and statistics. ",
        "comment_6": "This method prepares the dex file by preparing its sections, placing them within the file, and writing them out. It also handles annotations and calculates the file's signature and checksum.",
        "comment_7": "This method prepares the various sections of a dex file for writing. It involves preparing each section individually, then placing them within the file in a specific order.",
        "comment_8": "This method prepares the dex file for writing by preparing the various sections and placing them within the file. It then writes the sections to the output stream in the correct order.",
        "comment_9": "This method prepares and writes the dex file to a byte array. It first prepares all the sections of the dex file, then places them in the correct order within the file. Finally, it writes all the sections to the byte array and performs final bookkeeping tasks such as calculating the signature and checksum.",
        "comment_10": " Converts the data to a dex format and returns it as a ByteArrayAnnotatedOutput.  This method prepares all sections, places them in the file, and writes them out. ",
        "comment_11": " Writes the sections to a byte array and returns the ByteArrayAnnotatedOutput.  The sections are placed in the file according to their file offset.  If annotate is true, annotations are enabled and written to the output. ",
        "comment_12": "the sections to a byte array and returns the ByteArrayAnnotatedOutput.  The sections are placed in the file according to their file offset.  If annotate is true, annotations are enabled and written to the output.",
        "comment_13": " Converts the current state of the sections to a dex file format   and returns the ByteArrayAnnotatedOutput object representing the   dex file.  "
    },
    {
        "method_id": 19048,
        "comment_1": " Adds a new export rule to the configuration.<p>   @param name the name of the rule  @param description the description for the rule ",
        "method": "\nMethod:\n void addExportRule(String, String){\n    m_exportRules.add(new CmsStaticExportExportRule(name, description, m_exportTmpRule.getModifiedResources(), m_exportTmpRule.getExportResourcePatterns()));\n    m_exportTmpRule = new CmsStaticExportExportRule(\"\", \"\");\n}\nComment:\n",
        "project": "alkacon",
        "key": "alkacon_19048",
        "comment_2": " Adds a new export rule to the list of export rules with the specified name and description.  The new rule includes the modified resources and export resource patterns from the temporary export rule.  Resets the temporary export rule to an empty state after adding the new rule. ",
        "comment_3": " Adds a new export rule to the list of export rules with the specified name and description.  The new rule includes the modified resources and export resource patterns from the temporary export rule. ",
        "comment_4": " Adds a new export rule to the list of export rules with the given name and description.  Resets the temporary export rule to a new instance with empty name and description. ",
        "comment_5": " Adds a new export rule to the list of export rules using the provided name and description.   It initializes the new rule with the modified resources and export resource patterns from a temporary rule.   After adding, it resets the temporary rule to an empty state. ",
        "comment_6": "Adds a new export rule to the list of export rules. It creates a new CmsStaticExportExportRule object using the provided name and description, along with the modified resources and export resource patterns from the temporary export rule.",
        "comment_7": "Adds a new export rule to the list of export rules. It creates a new CmsStaticExportExportRule object using the provided name, description, modified resources, and export resource patterns.",
        "comment_8": "Adds a new export rule to the list of export rules. It creates a new CmsStaticExportExportRule object using the provided name and description, along with the modified resources and export resource patterns from the temporary export rule.",
        "comment_9": "Adds a new export rule to the list of export rules. The method creates a new CmsStaticExportExportRule object using the provided name and description, along with the modified resources and export resource patterns from the temporary export rule.",
        "comment_10": " Adds a new export rule to the collection of export rules with the provided name and description.  The rule is created using the current temporary export rule's modified resources and export resource patterns.  The temporary export rule is then reset for the next rule creation. ",
        "comment_11": " Adds a new export rule to the collection of export rules.  The rule is created with the provided name and description,   and includes the current modified resources and export resource patterns. ",
        "comment_12": " Adds a new export rule to the collection of export rules.  The rule is created using the provided name and description,   and the modified resources and export resource patterns from the temporary export rule. ",
        "comment_13": " Adds a new export rule to the collection of export rules with the provided name and description.  The rule is created using the current temporary export rule's modified resources and export resource patterns.  The temporary export rule is then reset for the next rule creation. "
    },
    {
        "method_id": 9964,
        "comment_1": " Renders the entity form within the given context.<p>   @param entityId the entity id  @param formParent the form parent widget ",
        "method": "\nMethod:\n void renderInlineEntity(String, I_CmsInlineFormParent){\n    m_entity = m_entityBackend.getEntity(entityId);\n    if (m_entity != null) {\n        if (m_rootHandler == null) {\n            m_rootHandler = new CmsRootHandler();\n        } else {\n            m_rootHandler.clearHandlers();\n        }\n        m_validationHandler.setContentService(m_service);\n        m_validationHandler.registerEntity(m_entity);\n        m_validationHandler.setRootHandler(m_rootHandler);\n        CmsType type = m_entityBackend.getType(m_entity.getTypeName());\n        CmsButtonBarHandler.INSTANCE.setWidgetService(m_widgetService);\n        m_widgetService.getRendererForType(type).renderInline(m_entity, formParent, this, m_rootHandler, 0);\n        CmsUndoRedoHandler.getInstance().initialize(m_entity, this, m_rootHandler);\n    }\n}\nComment:\n",
        "project": "alkacon",
        "key": "alkacon_9964",
        "comment_2": " Renders an inline entity by retrieving it from the backend and setting up necessary handlers and services.   Initializes or clears the root handler, sets up the validation handler, and uses the appropriate renderer to display the entity.   Also initializes the undoredo handler for the entity. ",
        "comment_3": "java Renders an inline entity by retrieving it from the backend and setting up necessary handlers and services.  Initializes or clears the root handler, sets up the validation handler, and uses the widget service to render the entity.  Also initializes the undoredo handler for the entity. ",
        "comment_4": " Renders an inline entity by fetching it from the backend and setting up necessary handlers and services.  Initializes and configures the root handler, validation handler, and widget service before rendering the entity.  Also sets up the undoredo handler for the entity. ",
        "comment_5": " Renders an inline entity by fetching it from the backend using the provided entity ID.   Initializes or clears the root handler, sets up the validation handler, and uses the appropriate renderer to display the entity inline.   Also initializes the undoredo handler for the entity. ",
        "comment_6": "This method retrieves an entity from the backend and renders it inline using the provided form parent. It initializes a validation handler, registers the entity with the handler, and renders the entity using the appropriate renderer based on its type. The method also initializes an undoredo handler for the entity.",
        "comment_7": "This method renders an inline entity. It first retrieves the entity from the entity backend and then initializes the validation handler. The method then renders the entity using the appropriate renderer based on the entity type. Finally, it initializes the undoredo handler.",
        "comment_8": "This method retrieves an entity from the backend and renders it inline using the appropriate renderer. It handles entity validation, sets up the root handler, and initializes undoredo functionality.",
        "comment_9": "Renders an inline entity given its entity ID and a parent form. This method retrieves the entity from the backend, initializes necessary handlers, and uses the appropriate renderer to render the entity inline within the provided parent form.",
        "comment_10": " Renders an inline entity form for the given entity ID and parent form element. ",
        "comment_11": " Renders an inline entity for the given form parent.  It initializes the necessary handlers and services,   and then uses the renderer for the entity's type to render the entity inline. ",
        "comment_12": " Renders an inline entity for the given form parent.  It initializes the necessary handlers and services, and then uses the renderer for the entity's type to render the entity inline.  If the entity is null, no action is taken. ",
        "comment_13": " Renders the inline entity with the given id and parent form,   using the root handler and validation handler for rendering and validation. "
    },
    {
        "method_id": 26734,
        "comment_1": " Returns if the given resource was visited by the user.<p>   @param cms the current users context  @param fileName the file name to track  @param subFolder flag indicating if sub folders should be included  @param user the user that should be used for the check  @param req the current request   return <code>true<code> if the given resource was visited by the user, otherwise <code>false<code>   throws CmsException if something goes wrong ",
        "method": "\nMethod:\n boolean isResourceVisited(CmsObject, String, boolean, CmsUser, HttpServletRequest){\n    CmsResource checkResource = cms.readResource(fileName);\n    HttpSession session = req.getSession(true);\n    String sessionKey = generateSessionKey(SESSION_PREFIX_VISITED, fileName, subFolder, user, null);\n    // try to get the visited resources from a session attribute\n    @SuppressWarnings(\"unchecked\")\n    List<CmsResource> visitedResources = (List<CmsResource>) req.getSession(true).getAttribute(sessionKey);\n    if (visitedResources == null) {\n        // first call, read visited resources and store them to session attribute\n        CmsVisitedByFilter filter = new CmsVisitedByFilter();\n        filter.setUser(user);\n        filter.setParentPath(CmsResource.getFolderPath(checkResource.getRootPath()));\n        filter.setIncludeSubfolders(subFolder);\n        visitedResources = OpenCms.getSubscriptionManager().readResourcesVisitedBy(cms, filter);\n        session.setAttribute(sessionKey, visitedResources);\n    }\n    return visitedResources.contains(checkResource);\n}\nComment:\n",
        "project": "alkacon",
        "key": "alkacon_26734",
        "comment_2": "java Checks if a specified resource has been visited by a user and stores the visited resources in the session.  If the resource has not been visited before, it reads the visited resources and updates the session attribute.  Returns true if the resource is found in the list of visited resources, otherwise false. ",
        "comment_3": "java Checks if a specified resource has been visited by a user, utilizing session attributes to store visited resources.  If the resource visit information is not already in the session, it retrieves the data and stores it for future use.  Returns true if the resource has been visited, otherwise false. ",
        "comment_4": "java Checks if a specified resource has been visited by a user, storing visited resources in the session if not already present.  Reads the resource and retrieves or initializes a list of visited resources from the session, then checks if the resource is in the list.  Returns true if the resource has been visited, otherwise false. ",
        "comment_5": " Checks if a specified resource has been visited by a user and stores the visited resources in the session if not already present.  Reads the resource and retrieves the list of visited resources from the session, updating the session if necessary.  Returns true if the resource is in the list of visited resources, otherwise false. ",
        "comment_6": "This method checks if a given resource has been visited by a user. It retrieves the visited resources from the user's session or from the database if it's the first call. The method then checks if the given resource is present in the list of visited resources and returns true if it is, otherwise it returns false.",
        "comment_7": "This method checks if a given resource has been visited by a user. It retrieves the list of visited resources from the user's session or from the database if it's the first call. Then, it checks if the given resource is present in the list of visited resources and returns true if it is, otherwise it returns false.",
        "comment_8": "This method checks if a given resource has been visited by a user. It retrieves the visited resources from the session or database based on the provided parameters. The method returns true if the resource is found in the list of visited resources, otherwise false.",
        "comment_9": "Checks if a given resource has been visited by a user. It retrieves the list of visited resources from the user's session or reads them from the database if it's the first visit. The method then checks if the given resource is present in the list of visited resources.",
        "comment_10": " Checks if a resource has been visited by a user, considering the subfolder flag.  The method uses the session to store the visited resources for the user. ",
        "comment_11": " Checks if a resource has been visited by a user.  It uses the session to store the visited resources and checks if the given resource is in the list.  If the list is not available in the session, it reads the visited resources from the database and stores them in the session. ",
        "comment_12": " Checks if a resource has been visited by a user.  It uses a session attribute to store the visited resources for the user.  The attribute is generated based on the user, resource path and subfolder. ",
        "comment_13": " Checks if a resource has been visited by a user, considering the subfolder flag.  The method reads the visited resources from the session attribute and updates it if necessary. "
    },
    {
        "method_id": 48196,
        "comment_1": " Returns the preferred editor preselection value either from the request, if not present, from the user settings.<p>   @param request the current http servlet request  @param galleryType the preferred gallery type  return the preferred editor preselection value or null, if none found ",
        "method": "\nMethod:\n String computeStartGalleryPreselection(HttpServletRequest, String){\n    // first check presence of the setting in request parameter\n    String preSelection = request.getParameter(PARAM_STARTGALLERY_PREFIX + galleryType);\n    if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(preSelection)) {\n        return CmsEncoder.decode(preSelection);\n    } else {\n        // no value found in request, check current user settings (not the member!)\n        CmsUserSettings userSettings = new CmsUserSettings(getSettings().getUser());\n        return userSettings.getStartGallery(galleryType);\n    }\n}\nComment:\n",
        "project": "alkacon",
        "key": "alkacon_48196",
        "comment_2": " Computes the preselected start gallery path for a given gallery type by first checking the request parameters.  If not found in the request, it retrieves the setting from the current user's settings.  The result is decoded if obtained from the request parameters. ",
        "comment_3": " Computes the preselected start gallery path based on the request parameter or user settings.  If a valid gallery path is found in the request parameters, it decodes and returns it.  Otherwise, it retrieves the start gallery path from the current user's settings. ",
        "comment_4": " Computes the initial gallery selection based on the request parameter or user settings.  If a relevant request parameter is found, it decodes and returns it; otherwise, it retrieves the setting from the user's preferences. ",
        "comment_5": " Computes the preselected start gallery path based on the request parameter or user settings.   If the request parameter is present and valid, it decodes and returns it; otherwise, it retrieves the value from the user's settings. ",
        "comment_6": "This method retrieves the preselection for the start gallery based on the gallery type. It first checks if the preselection is provided as a request parameter. If not, it retrieves the start gallery setting from the current user settings.",
        "comment_7": "This method retrieves the preselection for the start gallery based on the gallery type. It first checks if the preselection is present in the request parameter. If not, it retrieves the start gallery setting from the current user settings.",
        "comment_8": "This method retrieves the start gallery preselection for a given gallery type. It first checks if the preselection is present in the request parameter. If found, it decodes and returns the preselection. Otherwise, it retrieves the start gallery from the current user settings.",
        "comment_9": "This method retrieves the preselection for a gallery type. It first checks if the preselection is present in the request parameter. If not, it retrieves the preselection from the current user settings.",
        "comment_10": " Computes the start gallery preselection based on the request parameter or the current user settings.  If the request parameter is present, it is decoded and returned; otherwise, the user's start gallery setting is retrieved. ",
        "comment_11": " Returns the start gallery preselection for the given gallery type from the request parameter or user settings.  If the request parameter is empty, it falls back to the user's start gallery setting. ",
        "comment_12": " Returns the start gallery preselection for the given gallery type,   first checking the request parameter and then falling back to the current user's settings. ",
        "comment_13": " Returns the preselected start gallery for the given gallery type from the request parameter or the current user settings. "
    },
    {
        "method_id": 19406,
        "comment_1": " Checks if two-factor authentication is enabled.   return true if two-factor auth is enabled ",
        "method": "\nMethod:\n boolean isEnabled(){\n    return (m_config != null) && m_config.isEnabled();\n}\nComment:\n",
        "project": "alkacon",
        "key": "alkacon_19406",
        "comment_2": " Determines if the configuration is enabled by checking if the configuration object is not null and its two-factor authentication is enabled.  Returns true if both conditions are met. ",
        "comment_3": " Checks if the current configuration is enabled.   Returns true if the configuration object is not null and its enabled status is true. ",
        "comment_4": " Checks if the configuration is enabled.   Returns true if the configuration object is not null and its enabled status is true. ",
        "comment_5": " Determines if the configuration is enabled by checking if the configuration object is not null and its two-factor authentication is enabled.  Returns true if both conditions are met. ",
        "comment_6": "Checks if the component is enabled. It returns true if the configuration object is not null and the configuration object's isEnabled method returns true, otherwise it returns false.",
        "comment_7": "Checks if the feature is enabled. It returns true if the feature is enabled and false otherwise.",
        "comment_8": "Checks if the configuration is enabled. It returns true if the configuration is not null and the configuration is enabled.",
        "comment_9": "Checks if the configuration is enabled. It returns true if the configuration is not null and its enabled state is true, otherwise it returns false.",
        "comment_10": " Returns whether the configuration is enabled.  This method checks if the configuration object is not null and if it is enabled. ",
        "comment_11": " Returns whether the configuration is enabled.  It checks if the configuration object is not null and if it is enabled. ",
        "comment_12": " Returns whether the configuration is enabled.  It checks if the configuration object is not null and if it is enabled. ",
        "comment_13": " Returns whether the configuration is enabled.  This method checks if the configuration object is not null and if it is enabled. "
    },
    {
        "method_id": 38577,
        "comment_1": " Creates an SQL flag check condition.<p>   @param users the user table alias  @param flags the flags to check   return the resulting SQL expression ",
        "method": "\nMethod:\n I_CmsQueryFragment createFlagCondition(TableAlias, int){\n    return new CmsSimpleQueryFragment(users.column(colFlags()) + \" & ? = ? \", Integer.valueOf(flags), Integer.valueOf(flags));\n}\nComment:\n",
        "project": "alkacon",
        "key": "alkacon_38577",
        "comment_2": " Creates a query fragment that checks if a specific flag is set in the flags column of the users table.   The condition is constructed using a bitwise AND operation.   The method returns an instance of I_CmsQueryFragment representing this condition. ",
        "comment_3": " Creates a query fragment that checks if a specific flag is set in the flags column of the users table.  The condition is constructed using a bitwise AND operation with the provided flag value. ",
        "comment_4": " Creates a query fragment that checks if a specific flag is set in the user's flags column.  The method uses bitwise AND operation to compare the provided flag value with the stored flags. ",
        "comment_5": " Creates a query fragment that checks if a specific flag is set in the flags column of the users table.  The condition uses a bitwise AND operation to compare the provided flag value. ",
        "comment_6": "This method creates a flag condition for a given table alias and flag value. It constructs a SQL fragment that checks if the column specified by colFlags() in the users table has a bitwise AND operation with the given flag value. The result of this operation is then compared to the flag value using the equality operator.",
        "comment_7": "Creates a query fragment that checks if a flag is set.The method takes a table alias and a flag value as input. It constructs a query fragment that checks if the specified flag is set in the column named \"colFlags\".The query fragment uses a bitwise AND operation to check if the flag is set.",
        "comment_8": "This method creates a flag condition for a given table alias and flag value. It constructs a SQL fragment that checks if the column value for the specified column name, qualified by the table alias, has a specific bit set.",
        "comment_9": "This method creates a flag condition for a given table alias and integer value. It constructs a SQL fragment that checks if the column value for the specified column name has a specific bit set. The method returns a new CmsSimpleQueryFragment object containing the SQL fragment.",
        "comment_10": " Creates a query fragment that filters records based on a specific flag condition.  The condition is constructed by performing a bitwise AND operation on the column   representing flags in the table and the specified flag value. ",
        "comment_11": " Creates a query fragment that filters records based on a specific flag condition.  The condition is constructed by performing a bitwise AND operation on the column   representing flags in the table and the specified flag value. ",
        "comment_12": " Creates a flag condition for a query based on the provided table alias and flag value.  The condition checks if the column flags of the given table alias matches the provided flag value.  It returns an instance of CmsSimpleQueryFragment representing the condition. ",
        "comment_13": " Creates a query fragment that filters records based on a specific flag condition.  The condition is constructed by performing a bitwise AND operation on the column   representing flags in the table and the specified flag value. "
    },
    {
        "method_id": 1593,
        "comment_1": " Adds necessary attributes to the map.<p>   @param attributes the attribute map  @param callback the callback to execute ",
        "method": "\nMethod:\n void getImageAttributes(Map, I_CmsSimpleCallback){\n    if (getGalleryMode() == GalleryMode.editor) {\n        m_imageEditorFormatsTab.getImageAttributes(attributes);\n        m_imageAdvancedTab.getImageAttributes(attributes, callback);\n    } else {\n        callback.execute(attributes);\n    }\n}\nComment:\n",
        "project": "alkacon",
        "key": "alkacon_1593",
        "comment_2": " Retrieves and processes image attributes based on the current gallery mode.  If in editor mode, it gathers attributes from both the image editor and advanced tabs.  Otherwise, it directly executes the callback with the provided attributes. ",
        "comment_3": " Retrieves image attributes based on the current gallery mode.   If in editor mode, it fetches attributes from both the image editor formats tab and the image advanced tab; otherwise, it directly executes the callback with the attributes. ",
        "comment_4": "java Retrieves image attributes based on the current gallery mode.   If in editor mode, it fetches attributes from the image editor and advanced tabs; otherwise, it directly executes the callback with the attributes. ",
        "comment_5": " Retrieves image attributes based on the current gallery mode. If in editor mode, it gathers attributes from both the image editor formats tab and the image advanced tab. Otherwise, it directly executes the callback with the provided attributes. ",
        "comment_6": "This method retrieves image attributes based on the gallery mode. If the gallery mode is editor, it retrieves attributes from the image editor and advanced tabs. Otherwise, it executes the provided callback with the attributes.",
        "comment_7": "This method retrieves image attributes based on the gallery mode. If the gallery mode is editor, it retrieves attributes from the image editor and advanced tabs. Otherwise, it executes the provided callback with the attributes.",
        "comment_8": "Retrieves image attributes from the appropriate source based on the gallery mode. If in editor mode, it retrieves attributes from the image editor and advanced tabs. Otherwise, it executes the provided callback with the attributes.",
        "comment_9": "Retrieves image attributes from the editor or executes a callback with the attributes.If the gallery mode is in editor mode, it retrieves image attributes from the image editor and advanced tabs. Otherwise, it executes the provided callback with the attributes.",
        "comment_10": " Retrieves image attributes based on the current gallery mode.   If in editor mode, it fetches attributes from both image editor formats tab and advanced tab.   Otherwise, it executes the provided callback with the attributes. ",
        "comment_11": " Retrieves image attributes based on the current gallery mode.   If in editor mode, it fetches attributes from both image editor formats tab and advanced tab.   Otherwise, it executes the callback with the attributes. ",
        "comment_12": " Retrieves image attributes based on the current gallery mode.   If in editor mode, it fetches attributes from both image editor formats tab and advanced tab.   Otherwise, it executes the callback with the attributes. ",
        "comment_13": " Retrieves image attributes based on the current gallery mode.   If in editor mode, it fetches attributes from both image editor formats tab and advanced tab.   Otherwise, it executes the provided callback with the attributes. "
    },
    {
        "method_id": 37061,
        "comment_1": " Counts the total number of users which match the given search criteria.<p>   @param requestContext the request context  @param searchParams the search criteria object   return the number of users which match the search criteria  throws CmsException if something goes wrong ",
        "method": "\nMethod:\n long countUsers(CmsRequestContext, CmsUserSearchParameters){\n    CmsDbContext dbc = m_dbContextFactory.getDbContext(requestContext);\n    try {\n        return m_driverManager.countUsers(dbc, searchParams);\n    } catch (Exception e) {\n        dbc.report(null, Messages.get().container(Messages.ERR_COUNT_USERS_0), e);\n        return -1;\n    } finally {\n        dbc.clear();\n    }\n}\nComment:\n",
        "project": "alkacon",
        "key": "alkacon_37061",
        "comment_2": " Counts the total number of users that match the given search parameters.   If an exception occurs during the process, it reports the error and returns -1.   Finally, it clears the database context. ",
        "comment_3": "java Counts the number of users based on the provided search parameters.  Returns the count of users or -1 if an exception occurs during the process.  Ensures the database context is cleared after the operation. ",
        "comment_4": " Counts the number of users based on the provided search parameters.  Returns the count of users or -1 if an exception occurs during the process. ",
        "comment_5": " Counts the total number of users that match the given search parameters.   Returns the count of users or -1 if an exception occurs during the process.   Ensures the database context is cleared after the operation. ",
        "comment_6": "This method retrieves a database context, counts the number of users matching the provided search parameters, and returns the count. If an exception occurs during the counting process, an error message is logged, and -1 is returned.",
        "comment_7": "This method retrieves a database context and uses it to count the number of users that match the given search criteria. It handles any exceptions that occur during the process and returns the count or -1 if an error occurs.",
        "comment_8": "This method retrieves a database context, counts the number of users matching the given search criteria using the provided database context, and returns the count. If an exception occurs during the counting process, the exception is reported, and -1 is returned. Finally, the database context is cleared.",
        "comment_9": "This method retrieves the count of users based on the provided search parameters. It utilizes a database context to execute the count operation and handles potential exceptions during the process. If an error occurs, it reports the issue and returns -1, otherwise, it returns the user count.",
        "comment_10": " Counts the total number of users matching the given search parameters in the context of the provided request context.  It uses the database context factory to get a database context and then delegates the counting to the driver manager.  In case of an exception, it reports the error and returns -1. ",
        "comment_11": " Counts the number of users matching the given search parameters.  It uses the database context factory to get a database context,   then calls the driver manager to count the users,   and finally clears the database context. ",
        "comment_12": " Counts the number of users matching the given search parameters in the database.  It uses the provided request context to get a database context and then delegates the counting to the driver manager.  Returns -1 in case of an exception. ",
        "comment_13": " Counts the total number of users matching the given search parameters and returns the count.  If an error occurs during the count operation, it is reported and -1 is returned.  The database context is cleared after the operation. "
    },
    {
        "method_id": 14234,
        "comment_1": " Gets the structure id of the configured sitemap attribute editor configuration.   return the structure id of the configured sitemap attribute editor configuration ",
        "method": "\nMethod:\n CmsUUID getAttributeEditorConfigurationId(){\n    CmsADEConfigData parent = parent();\n    CmsUUID result = m_data.getAttributeEditorConfigId();\n    if ((result == null) && (parent != null)) {\n        result = parent.getAttributeEditorConfigurationId();\n    }\n    return result;\n}\nComment:\n",
        "project": "alkacon",
        "key": "alkacon_14234",
        "comment_2": " Retrieves the structure id of the configured sitemap attribute editor configuration.   If the current configuration id is null, it attempts to retrieve it from the parent configuration.    return the structure id of the sitemap attribute editor configuration ",
        "comment_3": "java Retrieves the attribute editor configuration ID. If the current object's configuration ID is null,  it recursively checks the parent object's configuration ID until a non-null value is found or no parent exists. ",
        "comment_4": " Retrieves the UUID of the attribute editor configuration.   If the current configuration ID is null, it attempts to fetch it from the parent configuration. ",
        "comment_5": " Retrieves the attribute editor configuration ID for the current object.   If the ID is not available, it attempts to retrieve it from the parent configuration.    return the attribute editor configuration ID, or the parent's ID if not set. ",
        "comment_6": "This method retrieves the attribute editor configuration ID for the current CmsADEConfigData object. It first checks if the ID is set in the local data. If not, it delegates the request to the parent CmsADEConfigData object.",
        "comment_7": "Returns the attribute editor configuration ID for this configuration data. If the ID is not set locally, it retrieves the ID from the parent configuration data.",
        "comment_8": "This method retrieves the attribute editor configuration ID for the current CMS ADE configuration data. It first checks if the ID is set in the current data. If not, it retrieves the ID from the parent configuration data.",
        "comment_9": "Retrieves the attribute editor configuration ID for this data object. If the ID is not set locally, it inherits the ID from its parent object. This ensures that the correct configuration is used for attribute editing.",
        "comment_10": " Returns the attribute editor configuration id from the current data or its parent if not found. ",
        "comment_11": " Returns the attribute editor configuration ID from the current data or   its parent if the current data does not have one. ",
        "comment_12": " Returns the attribute editor configuration ID for this object, (or its parent if not set).  If the ID is not set in this object, it recursively checks the parent object.  Null is returned if no configuration ID is found. ",
        "comment_13": " Returns the attribute editor configuration id from the current data or   from the parent if it is not set in the current data. "
    },
    {
        "method_id": 9458,
        "comment_1": " This schedules a new validation to be run after all currently scheduled or running validations have finished.<p>   If there are no validations running, the validation will be started immediately.<p>   @param action the validation to be scheduled ",
        "method": "\nMethod:\n void schedule(CmsValidationController){\n    if (m_idle) {\n        m_idle = false;\n        action.internalStartValidation();\n    } else {\n        m_actions.add(action);\n    }\n}\nComment:\n",
        "project": "alkacon",
        "key": "alkacon_9458",
        "comment_2": " Schedules a validation action. If the system is idle, it starts the validation immediately; otherwise, it queues the action for later execution. ",
        "comment_3": " Schedules a validation action. If the system is idle, it starts the validation process immediately;   otherwise, it queues the action for later execution. ",
        "comment_4": "java Schedules a validation action. If the system is idle, it starts the validation immediately; otherwise, it queues the action for later execution. ",
        "comment_5": " Schedules a validation action. If the system is idle, it starts the validation immediately; otherwise, it queues the action for later execution. ",
        "comment_6": "Schedules a validation controller for execution. If the scheduler is idle, the controller is started immediately. Otherwise, the controller is added to a queue for later execution.",
        "comment_7": "Schedules a validation action to be executed. If the scheduler is idle, the action is started immediately, otherwise it is queued.",
        "comment_8": "Schedules a validation action to be executed. If the scheduler is idle, the action is started immediately. Otherwise, the action is queued for later execution.",
        "comment_9": "Schedules a validation action to be executed. If the scheduler is idle, the action is started immediately. Otherwise, the action is queued for later execution.",
        "comment_10": " Schedules the given CmsValidationController for validation.   If the scheduler is idle, it starts the validation immediately;   otherwise, it adds the controller to the queue for later validation. ",
        "comment_11": " Schedules the given CmsValidationController for validation.   If the controller is idle, it starts the validation immediately.   Otherwise, it adds the controller to the queue for later validation. ",
        "comment_12": " Schedules the given CmsValidationController for validation.   If the system is currently idle, (i.e., no validation is in progress),   it starts the validation immediately; otherwise, it adds the action to a queue for later processing. ",
        "comment_13": " Schedules the validation action.   If idle, of the controller, it starts the validation immediately; otherwise, it adds the action to the queue. "
    },
    {
        "method_id": 32643,
        "comment_1": " Returns the path parameter as string.<p>   return the path parameter as string ",
        "method": "\nMethod:\n String getParamPath(){\n    String paramPath = m_context.getParameters().get(PARAM_PATH);\n    return paramPath;\n}\nComment:\n",
        "project": "alkacon",
        "key": "alkacon_32643",
        "comment_2": " Retrieves the value of the parameter identified by PARAM_PATH from the request parameters.  Returns the parameter value as a String. ",
        "comment_3": " Retrieves the value of the parameter identified by 'PARAM_PATH' from the context's parameters.   Returns the parameter value as a string. ",
        "comment_4": " Retrieves the parameter path from the context's parameters.  Returns the value associated with the key 'PARAM_PATH'. ",
        "comment_5": " Retrieves the value of the parameter identified by PARAM_PATH from the request parameters.  Utilizes the context's getParameters method to access the parameters. ",
        "comment_6": "Retrieves the value associated with the \"PARAM_PATH\" key from the parameters map within the context. This method accesses the parameters map using the context object and returns the string value corresponding to the specified key.",
        "comment_7": " Retrieves the path parameter from the request context.   This method accesses the request parameters and extracts the value associated with the \"PARAM_PATH\" key.  ",
        "comment_8": "This method retrieves the value associated with the key \"PARAM_PATH\" from the request parameters. It returns the retrieved value as a String.",
        "comment_9": "This method retrieves the value associated with the key \"PARAM_PATH\" from a collection of parameters stored within a context object. It returns the retrieved value as a string.",
        "comment_10": " Returns the value of the PARAM_PATH parameter from the request parameters. ",
        "comment_11": " Returns the value of the PARAM_PATH parameter from the context's parameters.  This method retrieves the PARAM_PATH parameter from the context's parameters map.  It returns null if the parameter is not found. ",
        "comment_12": " Returns the parameter path from the context.  The parameter path is retrieved from the context's parameters using the PARAM_PATH key. ",
        "comment_13": " Returns the value of the PARAM_PATH parameter from the request parameters. "
    },
    {
        "method_id": 19452,
        "comment_1": " Returns all child organizational units of the given parent organizational unit including  hierarchical deeper organization units if needed.<p>   @param cms the opencms context  @param ouFqn the fully qualified name of the parent organizational unit  @param includeChildren if hierarchical deeper organization units should also be returned   return a list of <code>@link CmsOrganizationalUnit<code> objects   throws CmsException if operation was not successful ",
        "method": "\nMethod:\n List<CmsOrganizationalUnit> getOrganizationalUnits(CmsObject, String, boolean){\n    CmsOrganizationalUnit parent = readOrganizationalUnit(cms, ouFqn);\n    return m_securityManager.getOrganizationalUnits(cms.getRequestContext(), parent, includeChildren);\n}\nComment:\n",
        "project": "alkacon",
        "key": "alkacon_19452",
        "comment_2": " Retrieves a list of organizational units based on the specified parent organizational unit and whether to include child units.  Utilizes the current request context for authentication and runtime settings.   @param cms the CMS object containing the current context  @param ouFqn the fully qualified name of the parent organizational unit  @param includeChildren flag indicating whether to include child organizational units  return a list of organizational units ",
        "comment_3": "java Retrieves a list of organizational units based on the specified fully qualified name (FQN) and inclusion of children.  It first reads the parent organizational unit and then fetches the relevant units using the security manager.   @param cms the CMS object used to access the context and organizational units  @param ouFqn the fully qualified name of the organizational unit to be read  @param includeChildren a boolean indicating whether to include child organizational units  return a list of organizational units matching the criteria ",
        "comment_4": " Retrieves a list of organizational units based on the specified parameters.   It fetches the parent organizational unit and then obtains its child units if specified. ",
        "comment_5": " Retrieves a list of organizational units based on the specified parent organizational unit and whether to include child units.   It uses the current request context for authentication and runtime settings. ",
        "comment_6": "This method retrieves a list of organizational units based on the provided CMS object, organizational unit FQN, and a flag indicating whether to include children. It first reads the parent organizational unit and then delegates the retrieval of child organizational units to the security manager.",
        "comment_7": "This method retrieves all organizational units for a given parent organizational unit. It utilizes the security manager to fetch the organizational units based on the provided request context, parent unit, and a flag indicating whether to include child units.",
        "comment_8": "This method retrieves a list of organizational units based on the provided parameters. It first reads the parent organizational unit using the provided FQN. Then, it uses the security manager to retrieve all child organizational units of the parent unit, including hierarchical deeper units if specified.",
        "comment_9": "Retrieves a list of organizational units associated with a given CMS object. It takes the CMS object, a fully qualified name (FQN) of the parent organizational unit, and a flag indicating whether to include child units. The method utilizes the security manager to fetch the organizational units based on the provided context.",
        "comment_10": " Retrieves a list of organizational units based on the provided CmsObject and FQN,   optionally including child organizational units. ",
        "comment_11": " Retrieves a list of organizational units based on the provided CmsObject and FQN.  The method first reads the parent organizational unit using the provided FQN and then   uses the security manager to get the list of organizational units based on the parent   and the includeChildren flag. ",
        "comment_12": " Retrieves a list of organizational units based on the provided CmsObject and FQN.  The method first reads the parent organizational unit and then uses the security manager to fetch the units.  The includeChildren flag determines whether child units are included in the result. ",
        "comment_13": " Retrieves a list of organizational units based on the provided CmsObject and FQN,   optionally including child organizational units. "
    },
    {
        "method_id": 9062,
        "comment_1": " @param blockId id of the block  return the block info associated with the block id, note that this will be a cached copy  and will not fetch the latest info from the master ",
        "method": "\nMethod:\n BlockInfo getBlockInfo(long){\n    Preconditions.checkArgument(mStatus.getBlockIds().contains(blockId), \"blockId\");\n    return mStatus.getFileBlockInfos().stream().map(FileBlockInfo::getBlockInfo).filter(blockInfo -> blockInfo.getBlockId() == blockId).findFirst().get();\n}\nComment:\n",
        "project": "Alluxio",
        "key": "Alluxio_9062",
        "comment_2": " Retrieves the BlockInfo object associated with the specified blockId.   Ensures the blockId is valid by checking its presence in the list of block IDs.   Returns the BlockInfo if found, otherwise throws an exception. ",
        "comment_3": "java Retrieves the BlockInfo object associated with the specified blockId.  Ensures the blockId is valid by checking its presence in the list of block IDs.  Returns the corresponding BlockInfo from the list of FileBlockInfos. ",
        "comment_4": " Retrieves the BlockInfo object associated with the specified blockId.   Ensures the blockId is valid and present in the current status before performing the lookup. ",
        "comment_5": " Retrieves the BlockInfo object corresponding to the specified blockId.  Ensures the blockId is valid by checking its presence in the list of block IDs. ",
        "comment_6": "Retrieves the BlockInfo object for a given blockId. It first checks if the blockId exists in the list of blockIds. If it exists, it then searches for the corresponding BlockInfo object in the list of FileBlockInfo objects and returns it.",
        "comment_7": " Retrieves the BlockInfo object for the given blockId.  This method first checks if the blockId exists in the list of blockIds.  If the blockId exists, it returns the BlockInfo object from the list of FileBlockInfo objects. ",
        "comment_8": "Retrieves the BlockInfo object for the given blockId. It first checks if the blockId exists in the list of blockIds. If it exists, it then searches for the corresponding BlockInfo object in the list of FileBlockInfo objects and returns it.",
        "comment_9": "Retrieves the BlockInfo object for a given block ID.It first checks if the block ID exists in the status object. If it exists, it searches for the corresponding BlockInfo object in the list of file block infos and returns it.",
        "comment_10": " Returns the block info for the given blockId if it exists in the file block info list,   otherwise throws a NoSuchElementException.   The method first checks if the blockId exists in the list of block ids belonging to the file. ",
        "comment_11": " Returns the BlockInfo object associated with the given blockId.  It first checks if the blockId exists in the list of blockIds and then filters the list of FileBlockInfo objects to find the matching BlockInfo.  If no matching BlockInfo is found, (which should not happen), it will throw a NoSuchElementException. ",
        "comment_12": " Retrieves the BlockInfo object associated with the given blockId from the file block information map.  It first checks if the blockId exists in the blockIds list and then filters the file block information map to find the matching BlockInfo object.  If no matching BlockInfo object is found, (which should not happen due to the initial check), it will throw a NoSuchElementException. ",
        "comment_13": " Returns the block info for the given blockId if it exists in the file block info list,   otherwise throws a NoSuchElementException.   It first checks if the blockId exists in the list of block ids belonging to the file. "
    },
    {
        "method_id": 1766,
        "comment_1": " Registers attribute renderers in a @link BasicRendererFactory. By  default, it registers delegates to @link StringRenderer,  @link DispatchRenderer and @link DefinitionRenderer.   @param rendererFactory           The renderer factory to configure.  @param applicationContext        The Tiles application context.  @param container                 The container.  @param attributeEvaluatorFactory The attribute evaluator factory.  since 2.2.0 ",
        "method": "\nMethod:\n void registerAttributeRenderers(BasicRendererFactory, ApplicationContext, TilesContainer, AttributeEvaluatorFactory){\n    rendererFactory.registerRenderer(STRING_RENDERER_NAME, createStringAttributeRenderer(rendererFactory, applicationContext, container, attributeEvaluatorFactory));\n    rendererFactory.registerRenderer(TEMPLATE_RENDERER_NAME, createTemplateAttributeRenderer(rendererFactory, applicationContext, container, attributeEvaluatorFactory));\n    rendererFactory.registerRenderer(DEFINITION_RENDERER_NAME, createDefinitionAttributeRenderer(rendererFactory, applicationContext, container, attributeEvaluatorFactory));\n}\nComment:\n",
        "project": "apache",
        "key": "apache_1766",
        "comment_2": " Registers various attribute renderers with the provided BasicRendererFactory.   It creates and registers string, template, and definition attribute renderers using the given application context, container, and attribute evaluator factory. ",
        "comment_3": " Registers attribute renderers for string, template, and definition types with the provided BasicRendererFactory.  Each renderer is created using the corresponding factory method and then registered with a unique name. ",
        "comment_4": " Registers attribute renderers with the provided BasicRendererFactory.   It sets up renderers for string, template, and definition attributes using the given application context, container, and attribute evaluator factory. ",
        "comment_5": " Registers attribute renderers for strings, templates, and definitions using the provided renderer factory, application context, container, and attribute evaluator factory. ",
        "comment_6": "Registers string, template, and definition attribute renderers with the provided renderer factory.It utilizes the provided application context, tiles container, and attribute evaluator factory to create instances of each renderer type.",
        "comment_7": "Registers three attribute renderers with the renderer factory: a string renderer, a template renderer, and a definition renderer. These renderers are created using the provided renderer factory, application context, container, and attribute evaluator factory.",
        "comment_8": "Registers string, template, and definition attribute renderers with the provided renderer factory.",
        "comment_9": "Registers three different attribute renderers with the provided renderer factory. These renderers are used to display string, template, and definition attributes respectively. The renderers are created using the provided application context, tiles container, and attribute evaluator factory.",
        "comment_10": " Registers attribute renderers for string, template, and definition attributes. ",
        "comment_11": " Registers attribute renderers for string, template, and definition attributes with the given renderer factory.  The renderers are created using the provided application context, tiles container, and attribute evaluator factory. ",
        "comment_12": "Registers attribute renderers for string, template, and definition attributes with the given renderer factory, using the provided application context, tiles container, and attribute evaluator factory. This method enables the rendering of these attribute types in the application.",
        "comment_13": " Registers attribute renderers for string, template, and definition attributes. "
    },
    {
        "method_id": 49045,
        "comment_1": " This method computes current consumer lag. Gets the total lag of all partitions and fill in the lagMetricsQueue   return a Runnbale object to compute and collect lag. ",
        "method": "\nMethod:\n Runnable computeAndCollectLag(){\n    return () -> {\n        LOCK.lock();\n        try {\n            if (!spec.isSuspended()) {\n                LagStats lagStats = supervisor.computeLagStats();\n                if (lagStats != null) {\n                    AggregateFunction aggregate = lagBasedAutoScalerConfig.getLagAggregate() == null ? lagStats.getAggregateForScaling() : lagBasedAutoScalerConfig.getLagAggregate();\n                    long lag = lagStats.getMetric(aggregate);\n                    lagMetricsQueue.offer(lag > 0 ? lag : 0L);\n                } else {\n                    lagMetricsQueue.offer(0L);\n                }\n                log.debug(\"Current lags for dataSource[%s] are [%s].\", dataSource, lagMetricsQueue);\n            } else {\n                log.warn(\"[%s] supervisor is suspended, skipping lag collection\", dataSource);\n            }\n        } catch (Exception e) {\n            log.error(e, \"Error while collecting lags\");\n        } finally {\n            LOCK.unlock();\n        }\n    };\n}\nComment:\n",
        "project": "apache",
        "key": "apache_49045",
        "comment_2": " Creates a Runnable task that computes lag statistics and collects them into a queue if the supervisor is not suspended.  The method locks a shared resource, computes the lag using a specified aggregate function, and logs the results or any errors encountered. ",
        "comment_3": " Creates a Runnable task that computes lag statistics and updates a queue with the computed lag values.  The method ensures thread safety using a lock and handles cases where the supervisor is suspended or an error occurs. ",
        "comment_4": "java Returns a Runnable that computes and collects lag statistics for a data source.  If the supervisor is not suspended, it calculates the lag and adds it to the lag metrics queue.  Logs the current lag metrics or a warning if the supervisor is suspended. ",
        "comment_5": "java Creates a Runnable task that computes lag statistics and collects the lag metrics into a queue.  If the supervisor is suspended, it skips the lag collection and logs a warning.  The method ensures thread safety by using a lock and handles any exceptions that occur during execution. ",
        "comment_6": "This method computes and collects lag statistics for a given data source. It acquires a lock, checks if the supervisor is suspended, and if not, computes lag statistics using the supervisor. The computed lag is then added to a lag metrics queue. If the supervisor is suspended, a warning message is logged.",
        "comment_7": "This method creates and returns a Runnable task that computes and collects lag statistics. The task acquires a lock, checks if the spec is suspended, and if not, computes lag statistics using the supervisor. The computed lag is then offered to a lag metrics queue. If the spec is suspended, a warning message is logged.",
        "comment_8": "This method creates and returns a Runnable task that computes and collects lag statistics. The task acquires a lock, checks if the supervisor is suspended, and if not, computes lag statistics using the supervisor's computeLagStats method. The computed lag is then added to a lag metrics queue. If the supervisor is suspended, a warning message is logged.",
        "comment_9": "This method creates and returns a Runnable task that computes and collects lag statistics. The task acquires a lock, checks if the supervisor is suspended, and if not, computes lag statistics using the supervisor. The computed lag is then offered to a lag metrics queue.",
        "comment_10": " Returns a Runnable that computes and collects lag statistics for the data source.  It locks the LOCK, computes the lag statistics, and adds the result to the lagMetricsQueue.  If the supervisor is suspended, it logs a warning and skips the lag collection. ",
        "comment_11": " Returns a Runnable that computes and collects lag statistics for the given data source.  It uses the supervisor to compute the lag stats, and then adds the result to the lag metrics queue.  It also handles cases where the supervisor is suspended or an error occurs during lag collection. ",
        "comment_12": " Returns a Runnable that computes and collects lag statistics for the given data source.  It locks the LOCK, computes the lag stats, and adds the result to the lagMetricsQueue.  If the supervisor is suspended, it logs a warning and skips the lag collection. ",
        "comment_13": " Returns a Runnable that computes and collects lag statistics for the given data source.  It locks the LOCK, computes the lag statistics, and adds the result to the lagMetricsQueue.  If the supervisor is suspended, it logs a warning and skips the lag collection. "
    },
    {
        "method_id": 95452,
        "comment_1": " Finds the bucket for the provided key using @link MemoryOpenHashTable#findBucket and initializes it if empty  using @link MemoryOpenHashTable#initBucket. Same return value as @link MemoryOpenHashTable#findBucket. ",
        "method": "\nMethod:\n int findAndInitBucket(MemoryOpenHashTable, int){\n    // Helps verify that offsets work\n    final int keyMemoryPosition = 1;\n    final WritableMemory keyMemory = WritableMemory.allocate(Integer.BYTES + 1);\n    keyMemory.putInt(keyMemoryPosition, key);\n    final int bucket = table.findBucket(HashTableUtils.hashMemory(keyMemory, keyMemoryPosition, Integer.BYTES), keyMemory, keyMemoryPosition);\n    if (bucket < 0) {\n        table.initBucket(-(bucket + 1), keyMemory, keyMemoryPosition);\n    }\n    return bucket;\n}\nComment:\n",
        "project": "apache",
        "key": "apache_95452",
        "comment_2": " Finds the appropriate bucket for the given key in the hash table and initializes it if it is not already occupied.   Returns the bucket number if the bucket is occupied, otherwise initializes the bucket and returns the negative bucket number minus one. ",
        "comment_3": "java Finds the appropriate bucket for the given key in the hash table. If the bucket is not already initialized, it initializes the bucket with the key. Returns the index of the bucket. ",
        "comment_4": "java Finds the bucket for the given key in the MemoryOpenHashTable and initializes it if it does not exist.  Returns the index of the bucket where the key is found or initialized. ",
        "comment_5": " Finds the appropriate bucket for the given key in the hash table and initializes it if it is not already occupied.   Returns the bucket number if it is occupied, otherwise initializes the bucket and returns the negative bucket number minus one. ",
        "comment_6": "This method finds the bucket for a given key in a hash table. If the bucket does not exist, it initializes a new bucket for the key. The method returns the index of the bucket.",
        "comment_7": "This method finds the bucket for a given key and initializes it if the bucket is not occupied. It first calculates the hash of the key and then searches for the bucket using the findBucket method. If the bucket is not occupied, it initializes the bucket using the initBucket method.",
        "comment_8": "Finds the bucket for a given key and initializes it if it doesn't exist.It first calculates the hash of the key and then uses the hash to find the corresponding bucket in the hash table. If the bucket is not occupied, it initializes the bucket with the key.Finally, it returns the bucket number.",
        "comment_9": "This method finds the bucket for a given key in a MemoryOpenHashTable. If the bucket does not exist, it initializes a new bucket. The method returns the index of the bucket.",
        "comment_10": " Finds and initializes a bucket for a given key in the hash table.  It first finds the bucket using the provided key and then initializes it if it is not already occupied.  The method returns the bucket number. ",
        "comment_11": " Finds a bucket in the hash table for the given key and initializes it if it does not exist.  The bucket is found using the hash of the key and the key is written to the bucket if it is new.  The method returns the index of the found or initialized bucket. ",
        "comment_12": " Finds the bucket for the given key in the hash table and initializes it if it does not exist.  The key is first written to a temporary memory location and then hashed to find the corresponding bucket.  If the bucket does not exist, it is initialized with the given key. ",
        "comment_13": " Finds a bucket for a given key and initializes it if it does not exist.  This method first calculates the hash of the key and then finds the corresponding bucket.  If the bucket does not exist, it is initialized with the given key. "
    },
    {
        "method_id": 38854,
        "comment_1": " Returns list of MAIN constraints dependent on this PK or UNIQUE constraint ",
        "method": "\nMethod:\n OrderedHashSet getDependentConstraints(Constraint){\n    OrderedHashSet set = new OrderedHashSet();\n    for (int i = 0, size = constraintList.length; i < size; i++) {\n        Constraint c = constraintList[i];\n        if (c.getConstraintType() == Constraint.MAIN) {\n            if (c.core.uniqueName == constraint.getName()) {\n                set.add(c);\n            }\n        }\n    }\n    return set;\n}\nComment:\n",
        "project": "apavlo",
        "key": "apavlo_38854",
        "comment_2": " Retrieves an OrderedHashSet of constraints that are dependent on the specified constraint.  It iterates through the list of constraints and adds those with a matching unique name and of type MAIN to the set. ",
        "comment_3": "java Retrieves an OrderedHashSet of constraints that are dependent on the given constraint.  It iterates through the list of constraints and adds those with a matching unique name and of type MAIN to the set.    @param constraint The constraint to find dependencies for.  return An OrderedHashSet containing the dependent constraints. ",
        "comment_4": "java Retrieves an OrderedHashSet of constraints that are dependent on the specified constraint.  It iterates through the list of constraints and adds those with a matching unique name and of type MAIN to the set. ",
        "comment_5": " Retrieves an OrderedHashSet of constraints that are dependent on the specified constraint.   It iterates through a list of constraints and adds those with a matching unique name to the set.  ",
        "comment_6": "This method retrieves all dependent constraints for a given constraint. It iterates through a list of constraints and adds any main constraints with the same name as the input constraint to a set. The set of dependent constraints is then returned.",
        "comment_7": " Returns a set of constraints that are dependent on the given constraint.  A constraint is considered dependent if its core constraint's unique name matches the given constraint's name.  Only MAIN type constraints are considered. ",
        "comment_8": " Returns a set of constraints that are dependent on the given constraint.  A constraint is considered dependent if it is a main constraint and has the same name as the given constraint. ",
        "comment_9": "This method retrieves all dependent constraints for a given constraint. It iterates through a list of constraints and adds any main constraint with a matching unique name to an OrderedHashSet. The method then returns the set of dependent constraints.",
        "comment_10": " Returns an ordered set of dependent constraints for the given constraint.  It iterates through the constraint list and adds the main constraints   that have the same unique name as the given constraint. ",
        "comment_11": " Returns an ordered set of dependent constraints for the given constraint.  It iterates through the constraint list and adds the main constraints   that have the same unique name as the given constraint. ",
        "comment_12": " Returns an ordered set of dependent constraints for the given constraint.  It iterates through the constraint list and adds the main constraints   that have the same unique name as the given constraint. ",
        "comment_13": " Returns an ordered set of dependent constraints for the given constraint.  It iterates through the constraint list and adds the main constraints   that have the same unique name as the given constraint. "
    },
    {
        "method_id": 34823,
        "comment_1": " Check through a plan graph and return true if it is read only ",
        "method": "\nMethod:\n boolean fragmentReadOnly(AbstractPlanNode){\n    if (node == null)\n        return true;\n    if (node instanceof InsertPlanNode)\n        return false;\n    if (node instanceof DeletePlanNode)\n        return false;\n    if (node instanceof UpdatePlanNode)\n        return false;\n    // recursively check out children\n    for (int i = 0; i < node.getChildPlanNodeCount(); i++) {\n        if (fragmentReadOnly(node.getChild(i)) == false)\n            return (false);\n    }\n    // if nothing found, return true\n    return true;\n}\nComment:\n",
        "project": "apavlo",
        "key": "apavlo_34823",
        "comment_2": " Determines if a given plan node and all its children are read-only.  Returns true if the node is null or if neither the node nor any of its children are instances of InsertPlanNode, DeletePlanNode, or UpdatePlanNode.  Recursively checks all child nodes to ensure they are also read-only. ",
        "comment_3": " Determines if a given plan node and all its child nodes are read-only.  Returns true if the node is null or if neither the node nor any of its children are instances of InsertPlanNode, DeletePlanNode, or UpdatePlanNode.  Recursively checks all child nodes to ensure they are also read-only. ",
        "comment_4": "java Determines if a given plan node and its children are read-only.  Returns true if the node is null or if neither the node nor any of its children are instances of InsertPlanNode, DeletePlanNode, or UpdatePlanNode.  Recursively checks all child nodes to ensure they are also read-only. ",
        "comment_5": "java Determines if the given plan node and all its descendants are read-only.  Returns true if the node is null or if neither the node nor any of its children are instances of InsertPlanNode, DeletePlanNode, or UpdatePlanNode.  Recursively checks all child nodes to ensure they are also read-only. ",
        "comment_6": "Determines if a fragment is read-only by checking if any of its nodes are Insert, Delete, or Update nodes. It recursively traverses the plan node tree and returns false if any of the nodes are modifiable, otherwise it returns true.",
        "comment_7": "Determines if a fragment is read-only based on the given plan node.This method checks if a given plan node represents a read-only operation. It recursively traverses the children of the node to determine if any child node represents a write operation (InsertPlanNode, DeletePlanNode, or UpdatePlanNode). If a write operation is found, the fragment is not read-only and the method returns false. Otherwise, the fragment is considered read-only and the method returns true.",
        "comment_8": "Determines if a fragment is read-only.A fragment is considered read-only if it does not contain any Insert, Delete, or Update nodes. This method recursively traverses the plan tree to check for these nodes.",
        "comment_9": "Determines if a given fragment is read-only.It checks if the fragment contains any nodes that are Insert, Delete, or Update nodes. If any of these nodes are present, the fragment is considered not read-only.",
        "comment_10": " Checks if the given AbstractPlanNode is read-only by recursively checking its children.  Returns true if the node is read-only, false otherwise. ",
        "comment_11": " Determines if the given AbstractPlanNode is read-only by checking if it is an instance of InsertPlanNode,   DeletePlanNode, or UpdatePlanNode. If it is not, it recursively checks its child nodes.   Returns true if the node is read-only, false otherwise. ",
        "comment_12": " Checks if a given plan node or any of its children are read-only.  Returns true if the node is read-only, false otherwise. ",
        "comment_13": " Checks if the given AbstractPlanNode is read-only by recursively checking its children.  Returns true if the node is read-only, false otherwise. "
    },
    {
        "method_id": 32158,
        "comment_1": " Get the Procedure handles that are marked as Read-Write conflicting for the  given Procedure  @param catalog_proc  return ",
        "method": "\nMethod:\n Collection<Procedure> getReadWriteConflicts(Procedure){\n    List<Procedure> conflicts = new ArrayList<Procedure>();\n    Database catalog_db = CatalogUtil.getDatabase(catalog_proc);\n    for (ConflictSet cs : catalog_proc.getConflicts().values()) {\n        if (cs.getReadwriteconflicts().isEmpty() == false) {\n            conflicts.add(catalog_db.getProcedures().get(cs.getName()));\n        }\n    }\n    // FOR\n    return (conflicts);\n}\nComment:\n",
        "project": "apavlo",
        "key": "apavlo_32158",
        "comment_2": " Retrieves a collection of procedures that have read-write conflicts with the given procedure.  It checks the conflict sets of the provided procedure and adds any procedures with read-write conflicts to the result list.  The method returns a collection of these conflicting procedures. ",
        "comment_3": " Retrieves a collection of procedures that have read-write conflicts with the given procedure.  It checks the conflict sets of the provided procedure and adds any procedures with read-write conflicts to the result list.  The method returns a collection of these conflicting procedures. ",
        "comment_4": "java Retrieves a collection of procedures that have read-write conflicts with the given procedure.  It checks the conflict sets of the provided procedure and adds any procedures with read-write conflicts to the result list. ",
        "comment_5": " Retrieves a collection of procedures that have read-write conflicts with the given procedure.   It checks the conflict sets of the provided procedure and adds any procedures with read-write conflicts to the result list. ",
        "comment_6": "This method retrieves a list of procedures that have read-write conflicts with the given procedure. It iterates through the conflict sets of the procedure and adds any procedures that are involved in read-write conflicts to a list. The list of conflicting procedures is then returned.",
        "comment_7": "This method retrieves all procedures that have a read-write conflict with the given procedure. It iterates through the conflict sets of the given procedure and adds any procedures that have a read-write conflict to a list. The list of conflicting procedures is then returned.",
        "comment_8": "This method retrieves all procedures that have read-write conflicts with the given procedure. It iterates through the conflict sets of the procedure and adds any procedures that have read-write conflicts to a list. The method then returns the list of conflicting procedures.",
        "comment_9": "This method identifies and returns a list of procedures that have read-write conflicts with the given input procedure. It iterates through the conflict sets associated with the input procedure and adds procedures involved in read-write conflicts to the conflicts list. The method then returns the list of conflicting procedures.",
        "comment_10": " Returns a collection of procedures that have read-write conflicts with the given procedure. ",
        "comment_11": " Returns a collection of procedures that have read-write conflicts with the given procedure.  It iterates over the conflicts of the given procedure and adds the conflicting procedures to the result collection.  The conflicting procedures are retrieved from the database using their names. ",
        "comment_12": " Retrieves a collection of procedures that have read-write conflicts with the given procedure.  It iterates through the conflict sets of the given procedure and adds the conflicting procedures to the result collection.  The method returns the collection of conflicting procedures. ",
        "comment_13": " Returns a collection of procedures that have read-write conflicts with the given procedure. "
    },
    {
        "method_id": 33012,
        "comment_1": " Create a TransactionInitRequest builder for the given txn.  If paramsSerializer is not null, we will include the procedure ParameterSet  in the builder's message.  @param ts  @param paramsSerializer  return ",
        "method": "\nMethod:\n TransactionInitRequest.Builder createTransactionInitBuilder(LocalTransaction, FastSerializer){\n    TransactionInitRequest.Builder builder = TransactionInitRequest.newBuilder().setTransactionId(ts.getTransactionId().longValue()).setProcedureId(ts.getProcedure().getId()).setBasePartition(ts.getBasePartition()).addAllPartitions(ts.getPredictTouchedPartitions());\n    if (paramsSerializer != null) {\n        FastSerializer fs = paramsSerializer;\n        try {\n            fs.clear();\n            ts.getProcedureParameters().writeExternal(fs);\n            builder.setProcParams(ByteString.copyFrom(fs.getBBContainer().b));\n        } catch (Exception ex) {\n            throw new RuntimeException(\"Failed to serialize ParameterSet for \" + ts, ex);\n        }\n    }\n    return (builder);\n}\nComment:\n",
        "project": "apavlo",
        "key": "apavlo_33012",
        "comment_2": " Creates and initializes a TransactionInitRequest.Builder with transaction details and optionally serializes procedure parameters if a FastSerializer is provided.  If serialization fails, a RuntimeException is thrown. ",
        "comment_3": "java Creates and initializes a TransactionInitRequest.Builder with transaction details and serialized procedure parameters.  If a FastSerializer is provided, it serializes the procedure parameters and includes them in the builder.  Returns the fully constructed TransactionInitRequest.Builder. ",
        "comment_4": "java Creates and initializes a TransactionInitRequest.Builder with the transaction details and serialized procedure parameters.  If a FastSerializer is provided, it serializes the procedure parameters and includes them in the builder.  Returns the fully constructed TransactionInitRequest.Builder. ",
        "comment_5": "java Creates and initializes a TransactionInitRequest.Builder with transaction details and serialized procedure parameters if available.  It sets the transaction ID, procedure ID, base partition, and touched partitions, and serializes the procedure parameters using the provided FastSerializer.  If serialization fails, it throws a RuntimeException. ",
        "comment_6": "Creates a TransactionInitRequest.Builder object initialized with the provided LocalTransaction and FastSerializer. It sets the transaction ID, procedure ID, base partition, and partitions from the LocalTransaction. If a FastSerializer is provided, it serializes the procedure parameters and sets them in the builder.",
        "comment_7": "Creates a TransactionInitRequest.Builder object populated with transaction details from a LocalTransaction object.It sets the transaction ID, procedure ID, base partition, and touched partitions from the LocalTransaction.If a FastSerializer is provided, it serializes the procedure parameters and adds them to the builder.",
        "comment_8": "This method creates a TransactionInitRequest.Builder object and initializes it with the transaction details from the provided LocalTransaction object. It also serializes the procedure parameters using the provided FastSerializer and adds them to the builder.",
        "comment_9": "This method creates a TransactionInitRequest.Builder object and initializes it with the transaction details from a LocalTransaction object. It also serializes the procedure parameters using a FastSerializer if a serializer is provided.",
        "comment_10": " Creates a TransactionInitRequest.Builder object and initializes it with the given LocalTransaction's details.  It also serializes the procedure parameters using the provided FastSerializer and sets them in the builder.  If serialization fails, it throws a RuntimeException. ",
        "comment_11": " Creates a TransactionInitRequest.Builder object and initializes it with the given LocalTransaction.  It also serializes the procedure parameters using the provided FastSerializer and sets them in the builder.  If serialization fails, it throws a RuntimeException. ",
        "comment_12": " Creates a TransactionInitRequest.Builder object with the given LocalTransaction and FastSerializer.  It sets the transactionId, procedureId, basePartition, and partitions in the builder.  If paramsSerializer is not null, it serializes the procedure parameters and sets them in the builder. ",
        "comment_13": " Creates a TransactionInitRequest.Builder object and initializes it with the given LocalTransaction's details.  It also serializes the procedure parameters using the provided FastSerializer and sets them in the builder.  If serialization fails, it throws a RuntimeException. "
    },
    {
        "method_id": 32231,
        "comment_1": " Return the list of every ProcParameter except for SpecialProcParameters ",
        "method": "\nMethod:\n List<ProcParameter> getRegularProcParameters(Procedure){\n    List<ProcParameter> params = new ArrayList<ProcParameter>();\n    for (ProcParameter catalog_param : catalog_proc.getParameters()) {\n        if (catalog_param instanceof SpecialProcParameter)\n            continue;\n        params.add(catalog_param);\n    }\n    // FOR\n    return (params);\n}\nComment:\n",
        "project": "apavlo",
        "key": "apavlo_32231",
        "comment_2": "java Retrieves a list of regular procedure parameters, excluding any special procedure parameters. ",
        "comment_3": "java Retrieves a list of regular procedure parameters, excluding any special procedure parameters.  Iterates through all parameters of the given procedure and filters out instances of SpecialProcParameter. ",
        "comment_4": " Retrieves a list of regular procedure parameters, excluding any special procedure parameters.  Iterates through the parameters of the given procedure and adds only non-special parameters to the result list. ",
        "comment_5": " Retrieves a list of regular procedure parameters, excluding any special procedure parameters.   Iterates through the parameters of the given procedure and filters out instances of SpecialProcParameter. ",
        "comment_6": "This method retrieves all regular procedure parameters from a given procedure. It iterates through the procedure's parameters and excludes any special procedure parameters. The method returns a list of regular procedure parameters.",
        "comment_7": "This method retrieves all regular procedure parameters from a given procedure object. It iterates through the parameters of the procedure and excludes any special procedure parameters, returning a list of regular parameters.",
        "comment_8": "This method retrieves all regular procedure parameters from a given procedure object. It iterates through the procedure's parameters and excludes any special procedure parameters, returning a list of regular parameters.",
        "comment_9": "This method retrieves all regular procedure parameters from a given procedure object. It iterates through the procedure's parameters and excludes any special procedure parameters. The method returns a list containing only the regular procedure parameters.",
        "comment_10": " Returns a list of regular procedure parameters excluding special procedure parameters. ",
        "comment_11": " Returns a list of regular procedure parameters excluding special procedure parameters.  It iterates over the catalog procedure parameters and adds the regular ones to the list.  The catalog procedure parameters are retrieved using the getParameters method. ",
        "comment_12": " Returns a list of regular procedure parameters excluding special procedure parameters.  It iterates over the parameters of the given procedure and adds the regular ones to the result list.  The method returns an empty list if no regular parameters are found. ",
        "comment_13": " Returns a list of regular procedure parameters excluding special procedure parameters. "
    },
    {
        "method_id": 41267,
        "comment_1": " This method deletes a data file or resets its free position.  this is used only for nio files - not OOo files ",
        "method": "\nMethod:\n void deleteOrResetFreePos(Database, String){\n    ScaledRAFile raFile = null;\n    database.getFileAccess().removeElement(filename);\n    // OOo related code\n    if (database.isStoredFileAccess()) {\n        return;\n    }\n    // OOo end\n    if (!database.getFileAccess().isStreamElement(filename)) {\n        return;\n    }\n    try {\n        raFile = new ScaledRAFile(database, filename, false);\n        raFile.seek(LONG_FREE_POS_POS);\n        raFile.writeLong(INITIAL_FREE_POS);\n    } catch (IOException e) {\n        database.logger.appLog.logContext(e, null);\n    } finally {\n        if (raFile != null) {\n            try {\n                raFile.close();\n            } catch (IOException e) {\n                database.logger.appLog.logContext(e, null);\n            }\n        }\n    }\n}\nComment:\n",
        "project": "apavlo",
        "key": "apavlo_41267",
        "comment_2": " Deletes or resets the free position of a file associated with the given database.   If the file is not part of the stored file access or does not exist, the method returns early.   Otherwise, it initializes the free position in the file to a predefined value. ",
        "comment_3": " Deletes or resets the free position of a file in the database. If the file is not stored, it resets the free position to an initial value. Handles any IO exceptions that occur during the process and ensures the file is properly closed. ",
        "comment_4": "java Deletes the specified file from the database or resets its free position marker.  If the file is not found or the database uses stored file access, the method exits early.  Otherwise, it sets the free position marker to its initial value and handles any IO exceptions. ",
        "comment_5": " Deletes or resets the free position in the specified database file. If the file is not part of the stored file access or does not exist, the method returns early. Otherwise, it seeks to a specific position in the file and writes an initial free position value, handling any IOExceptions that occur. ",
        "comment_6": "This method deletes or resets the free position of a file in the database. It first removes the element from the file access. Then, it checks if the file access is stored and returns if it is. If the file access is not a stream element, it also returns. Finally, it creates a ScaledRAFile object, seeks to the LONG_FREE_POS_POS position, and writes the INITIAL_FREE_POS value.",
        "comment_7": "This method deletes or resets the free position of a file in the database. It first removes the element from the file access, then checks if the file access is stored. If it is not stored, it checks if the file element is a stream element. If it is a stream element, it creates a new ScaledRAFile object and seeks to the LONG_FREE_POS_POS position. It then writes the INITIAL_FREE_POS value to the file. The method handles potential IOExceptions during file operations.",
        "comment_8": "This method deletes or resets the free position of a file in the database. It first checks if the file exists and is a stream element. If so, it opens the file, seeks to the free position, and writes the initial free position value.",
        "comment_9": "This method deletes or resets the free position of a file in the database. It first removes the file element from the database file access. Then, it checks if the file is a stream element and if it is stored in the database file access. If both conditions are true, it opens the file, seeks to the long free position position, and writes the initial free position. Finally, it closes the file and handles any potential IOExceptions.",
        "comment_10": " Deletes or resets the free position in the given database file.  It removes the file element from the database and resets the free position to its initial value.  If the file is stored, it does nothing. ",
        "comment_11": " Deletes or resets the free position in the given database and filename.  It removes the element from the file access and resets the free position to its initial value.  If the file access is stored, it simply returns without performing any operation. ",
        "comment_12": " Deletes or resets the free position in the given database.  If the file access is stored, it simply removes the element.  If the file access is a stream, it resets the free position to its initial value. ",
        "comment_13": " Removes the specified file from the database and resets the free position to its initial value. "
    },
    {
        "method_id": 41314,
        "comment_1": " Retrieves whether there is potentially already a cooperative lock,  operating system lock or some other situation preventing a cooperative  lock condition from being aquired using the specified path.   @param path the path to test  return <tt>true<tt> if there is currently something preventing the       acquisition of a cooperative lock condition using the specified       <tt>path<tt>, else <tt>false<tt> ",
        "method": "\nMethod:\n boolean isLocked(String){\n    boolean locked = true;\n    try {\n        LockFile lockFile = LockFile.newLockFile(path);\n        lockFile.checkHeartbeat(false);\n        locked = false;\n    } catch (Exception e) {\n    }\n    return locked;\n}\nComment:\n",
        "project": "apavlo",
        "key": "apavlo_41314",
        "comment_2": "java Determines if the lock file at the specified path is currently locked.  Returns true if the lock file is locked or an exception occurs during the check, otherwise returns false. ",
        "comment_3": "java Checks if the lock file is currently locked by attempting to create a new lock file and checking its heartbeat.  Returns true if the lock file is locked, otherwise returns false. ",
        "comment_4": " Checks if a resource is locked by attempting to create and verify a lock file.  Returns true if the resource is locked, otherwise returns false. ",
        "comment_5": " Determines if the lock file at the specified path is currently locked by another process.  Returns true if the lock file is in use, otherwise returns false.  Catches and ignores any exceptions that occur during the check. ",
        "comment_6": "This method checks if a lock file is locked by another process. It attempts to acquire a lock on the file and checks if the heartbeat timestamp is valid. If the heartbeat is not valid, it indicates that the lock is held by another process and returns true. Otherwise, it returns false.",
        "comment_7": "This method checks if the underlying lock file is currently held by another process. It does this by reading the file's heartbeat timestamp and comparing it to the current time. If the difference is less than or equal to the heartbeat interval, it assumes the lock is still held.",
        "comment_8": "Checks if the lock file is locked by another process by checking its heartbeat timestamp.",
        "comment_9": "Checks if the file is locked by checking the heartbeat of the lock file. If the heartbeat check is successful, it indicates the file is unlocked and returns false. Otherwise, it returns true, indicating the file is locked.",
        "comment_10": " Checks if a lock file is currently locked by another process.  Returns true if the file is locked, false otherwise. ",
        "comment_11": " Checks if a lock file is locked by checking its heartbeat.  If the heartbeat is recent, the file is considered locked.  Returns true if the file is locked, false otherwise. ",
        "comment_12": " Checks if a file is locked by attempting to create a lock file and checking its heartbeat.  If the lock file is successfully created and its heartbeat is valid,, the file is considered unlocked.  Returns true if the file is locked, false otherwise. ",
        "comment_13": "Checks if the lock file's heartbeat timestamp is live, indicating the file is presumably in use by another LockFile instance."
    },
    {
        "method_id": 5728,
        "comment_1": " Returns the matched or newly created constant index for the given  pattern constant index. ",
        "method": "\nMethod:\n int matchedConstantIndex(ProgramClass, int){\n    // Special case: do we have to create a concatenated string?\n    if (constantIndex >= BOOLEAN_A_STRING && constantIndex <= (STRING_A_STRING | STRING_B_STRING)) {\n        // Create a new string constant and return its index.\n        return new ConstantPoolEditor(programClass).addStringConstant(argumentAsString(programClass, constantIndex & 0xf, A) + argumentAsString(programClass, (constantIndex >>> 4) & 0xf, B), null, null);\n    }\n    int matchedConstantIndex = instructionSequenceMatcher.matchedConstantIndex(constantIndex);\n    // Do we have a matched constant index?\n    if (matchedConstantIndex > 0) {\n        // Return its index.\n        return matchedConstantIndex;\n    }\n    // Otherwise, we still have to create a new constant.\n    // This currently only works for constants without any wildcards.\n    ProgramClass dummyClass = new ProgramClass();\n    dummyClass.constantPool = patternConstants;\n    return new ConstantAdder(programClass).addConstant(dummyClass, constantIndex);\n}\nComment:\n",
        "project": "bazel",
        "key": "bazel_5728",
        "comment_2": " Returns the index of a matched constant in the constant pool of the given ProgramClass.   If the constant requires concatenation, it creates a new string constant and returns its index.   Otherwise, it either returns the matched constant index or creates a new constant if no match is found. ",
        "comment_3": " Returns the index of a matched constant in the constant pool of the given ProgramClass.  If the constant index indicates a concatenated string, it creates and adds the new string constant.  Otherwise, it attempts to find a matched constant index or creates a new constant if no match is found. ",
        "comment_4": "java Returns the index of a matched constant in the constant pool of the given ProgramClass.  If the constant requires concatenation or is not found, it creates a new constant and returns its index. ",
        "comment_5": " Returns the index of a matched constant in the constant pool of the given ProgramClass. If the constant is a concatenated string, it creates a new string constant and returns its index. Otherwise, it either returns the matched constant index or creates a new constant if no match is found. ",
        "comment_6": "This method determines the index of a matched constant in the constant pool. It handles special cases where a concatenated string constant needs to be created. If a matched constant index is found, it is returned. Otherwise, a new constant is created and its index is returned.",
        "comment_7": "This method determines the index of a matched constant within a program class's constant pool. It handles special cases involving concatenated strings and utilizes a matcher to find existing matched constants. If no match is found, it creates a new constant using a dummy class and returns its index.",
        "comment_8": "This method determines the index of a matched constant within a program class. It handles special cases for concatenated strings and utilizes an instruction sequence matcher to find a matching constant index. If no match is found, a new constant is created and its index is returned.",
        "comment_9": "This method determines the index of a matched constant in the constant pool. If a match is found, its index is returned. Otherwise, a new constant is created and its index is returned.",
        "comment_10": " Returns the index of a constant in the constant pool of the given program class.  If the constant is a concatenated string, it creates a new string constant.  If the constant is matched, it returns the matched constant index. ",
        "comment_11": "java Returns the index of a matched constant in the constant pool of the given program class.  If no match is found, a new constant is created and its index is returned.  The method handles special cases for concatenated strings. ",
        "comment_12": "  Returns the index of a matched constant in the constant pool,   creating a new concatenated string constant if necessary,   or adds a new constant to the pool if no match is found. ",
        "comment_13": " Returns the index of a matched constant in the constant pool,   either by reusing an existing constant or creating a new one. "
    },
    {
        "method_id": 21645,
        "comment_1": " Collects the validation action output groups from every dependency-type attribute on this rule.  This is done within @link RuleConfiguredTargetBuilder so that every rule always and  automatically propagates the validation action output group.   <p>Note that in addition to @link LabelClass.DEPENDENCY, there is also @link  LabelClass.FILESET_ENTRY, however the fileset implementation takes care of propagating the  validation action output group itself. ",
        "method": "\nMethod:\n void collectTransitiveValidationOutputGroups(){\n    for (String attributeName : ruleContext.attributes().getAttributeNames()) {\n        Attribute attribute = ruleContext.attributes().getAttributeDefinition(attributeName);\n        // Validation actions for tools, or from implicit deps should\n        // not fail the overall build, since those dependencies should have their own builds\n        // and tests that should surface any failing validations.\n        if (!attribute.getTransitionFactory().isTool() && !attribute.isImplicit() && attribute.getType().getLabelClass() == LabelClass.DEPENDENCY) {\n            for (OutputGroupInfo outputGroup : ruleContext.getPrerequisites(attributeName, OutputGroupInfo.STARLARK_CONSTRUCTOR)) {\n                NestedSet<Artifact> validationArtifacts = outputGroup.getOutputGroup(OutputGroupInfo.VALIDATION);\n                if (!validationArtifacts.isEmpty()) {\n                    addOutputGroup(OutputGroupInfo.VALIDATION, validationArtifacts);\n                }\n            }\n        }\n    }\n}\nComment:\n",
        "project": "bazel",
        "key": "bazel_21645",
        "comment_2": " Collects and adds validation output groups from the transitive dependencies of the rule's attributes.  It filters out attributes that are tools, implicit, or not dependencies, and aggregates validation artifacts  from the remaining attributes' prerequisites. ",
        "comment_3": "java Collects and adds validation output groups from the transitive dependencies of the rule's attributes.  Only considers attributes that are not tools, not implicit, and are of dependency type. ",
        "comment_4": " Collects and adds validation output groups from the transitive dependencies of the current rule context.  Only considers attributes that are not tools or implicit dependencies and are of type DEPENDENCY. ",
        "comment_5": " Collects and adds validation output groups from the transitive dependencies of the rule's attributes.  It filters out attributes that are tools, implicit, or not dependencies, and aggregates validation artifacts from the remaining attributes. ",
        "comment_6": "This method collects validation output groups from transitive dependencies. It iterates through each attribute in the rule context and checks if the attribute is a dependency and not a tool or implicit dependency. If it is, it retrieves the validation artifacts from the output group and adds them to the current output group.",
        "comment_7": "This method collects validation output groups from transitive dependencies. It iterates through each attribute of the rule context and checks if the attribute is not a tool, not implicit, and is a dependency. If these conditions are met, it retrieves the output groups for the attribute and adds the validation artifacts to the output group.",
        "comment_8": "This method collects validation artifacts from transitive dependencies. It iterates through each attribute of the rule context and checks if the attribute is a dependency and not a tool or implicit dependency. If it is, it retrieves the validation artifacts from the output group of the dependency and adds them to the current rule's output group.",
        "comment_9": "This method collects validation output groups from transitive dependencies. It iterates through each attribute in the rule context and checks if it is a dependency that is not a tool or implicit. If it is, it retrieves the validation artifacts from the output groups of the prerequisites and adds them to the current output group.",
        "comment_10": " Collects transitive validation output groups from the rule context's attributes,   excluding tool and implicit dependencies, and adds them to the validation output group. ",
        "comment_11": " Collects the transitive validation output groups from the rule context's attributes.  It iterates over each attribute, checks if it's not a tool or implicit dependency,   and if it's a dependency type, then adds its validation output group to the result. ",
        "comment_12": " Collects transitive validation output groups from the rule context's attributes,   excluding tool and implicit dependencies, and adds them to the validation output group. ",
        "comment_13": " Collects transitive validation output groups from the rule context's attributes.  It iterates over each attribute, checks if it's a dependency and not implicit or tool,  and then adds its validation output group to the result if it's not empty. "
    },
    {
        "method_id": 42014,
        "comment_1": " Collects and processes all the rule and attribute documentation in inputDirs and generates the  Build Encyclopedia into the outputDir.   @param inputDirs list of directory to scan for document in the source code  @param outputDir output directory where to write the build encyclopedia  @param denyList optional path to a file listing rules to not document ",
        "method": "\nMethod:\n void generateDocumentation(List, String, String){\n    BuildDocCollector collector = new BuildDocCollector(productName, ruleClassProvider, false);\n    RuleLinkExpander expander = new RuleLinkExpander(productName, true);\n    Map<String, RuleDocumentation> ruleDocEntries = collector.collect(inputDirs, denyList, expander);\n    warnAboutUndocumentedRules(Sets.difference(ruleClassProvider.getRuleClassMap().keySet(), ruleDocEntries.keySet()));\n    RuleFamilies ruleFamilies = assembleRuleFamilies(ruleDocEntries.values());\n    Page page = TemplateEngine.newPage(DocgenConsts.SINGLE_BE_TEMPLATE);\n    // Add the rule link expander.\n    page.add(\"expander\", expander);\n    // Populate variables for Common Definitions section.\n    page.add(\"typicalAttributes\", expandCommonAttributes(PredefinedAttributes.TYPICAL_ATTRIBUTES, expander));\n    page.add(\"commonAttributes\", expandCommonAttributes(PredefinedAttributes.COMMON_ATTRIBUTES, expander));\n    page.add(\"testAttributes\", expandCommonAttributes(PredefinedAttributes.TEST_ATTRIBUTES, expander));\n    page.add(\"binaryAttributes\", expandCommonAttributes(PredefinedAttributes.BINARY_ATTRIBUTES, expander));\n    // Popualte variables for Overview section.\n    page.add(\"langSpecificRuleFamilies\", ruleFamilies.langSpecific);\n    page.add(\"genericRuleFamilies\", ruleFamilies.generic);\n    // Populate variables for Rules section.\n    page.add(\"ruleFamilies\", ruleFamilies.all);\n    page.add(\"singlePage\", true);\n    writePage(page, outputDir, \"build-encyclopedia.html\");\n}\nComment:\n",
        "project": "bazel",
        "key": "bazel_42014",
        "comment_2": " Generates the build documentation by collecting rule documentation from specified directories,  expanding rule links, and assembling rule families. It then populates a template with the collected  data and writes the final documentation to an output directory. ",
        "comment_3": " Generates the build documentation by collecting rule documentation entries, warning about undocumented rules,   assembling rule families, and populating a template page with the necessary attributes and rule families.   Finally, it writes the populated page to the specified output directory. ",
        "comment_4": "java Generates documentation for build rules by collecting rule documentation entries,   assembling rule families, and populating a template page with the relevant data.   @param inputDirs List of directories to collect documentation from.  @param denyList List of rules to exclude from the documentation.  @param outputDir Directory where the generated documentation will be written. ",
        "comment_5": " Generates the build documentation by collecting rule documentation from specified directories, expanding rule links, and assembling rule families.   It then populates a template with the collected data and writes the final documentation to an HTML file. ",
        "comment_6": "This method generates documentation for the provided input directories. It collects rule documentation, assembles rule families, and populates a template page with the generated content. The resulting documentation is written to an output directory as a single HTML page.",
        "comment_7": "This method generates the documentation for the build encyclopedia. It collects rule documentation from the specified input directories, expands references to other rules and attributes, and assembles the documentation into a single HTML page.",
        "comment_8": "This method generates the documentation for the build encyclopedia. It collects rule documentation from the specified input directories, expands references, and assembles the documentation into a single HTML page.",
        "comment_9": "This method generates documentation for the provided input directories and writes it to an HTML file. It collects rule documentation, assembles rule families, and populates a template with the gathered information.",
        "comment_10": " Generates the Build Encyclopedia documentation for the given input directories and writes it to the specified output directory. ",
        "comment_11": "java Generates the documentation for the given input directories and writes it to the specified output directory.  It collects rule documentation entries, warns about undocumented rules, assembles rule families,   and populates variables for different sections of the documentation page. ",
        "comment_12": "java Generates the build encyclopedia documentation by collecting rule documentation,   assembling rule families, and populating template variables for the overview,   common definitions, and rules sections. ",
        "comment_13": " Generates the Build Encyclopedia documentation for the given input directories and writes it to the specified output directory. "
    },
    {
        "method_id": 152674,
        "comment_1": " Use a @linkplain ValueFetcher to extract values from doc values. ",
        "method": "\nMethod:\n List<?> fetchFromDocValues(MapperService, MappedFieldType, DocValueFormat, Object){\n    BiFunction<MappedFieldType, Supplier<SearchLookup>, IndexFieldData<?>> fieldDataLookup = (mft, lookupSource) -> mft.fielddataBuilder(\"test\", () -> {\n        throw new UnsupportedOperationException();\n    }).build(new IndexFieldDataCache.None(), new NoneCircuitBreakerService());\n    SetOnce<List<?>> result = new SetOnce<>();\n    withLuceneIndex(mapperService, iw -> {\n        iw.addDocument(mapperService.documentMapper().parse(source(b -> b.field(ft.name(), sourceValue))).rootDoc());\n    }, iw -> {\n        SearchLookup lookup = new SearchLookup(mapperService::fieldType, fieldDataLookup);\n        ValueFetcher valueFetcher = new DocValueFetcher(format, lookup.doc().getForField(ft));\n        IndexSearcher searcher = newSearcher(iw);\n        LeafReaderContext context = searcher.getIndexReader().leaves().get(0);\n        lookup.source().setSegmentAndDocument(context, 0);\n        valueFetcher.setNextReader(context);\n        result.set(valueFetcher.fetchValues(lookup.source()));\n    });\n    return result.get();\n}\nComment:\n",
        "project": "elasticsearch",
        "key": "elasticsearch_152674",
        "comment_2": " Fetches a list of values from document fields using the provided field type and format.   It utilizes Lucene indexing to parse and add documents, then retrieves the values using a value fetcher. ",
        "comment_3": " Fetches a list of values from document fields using the provided MapperService, MappedFieldType, and DocValueFormat.  It constructs the necessary field data and performs a Lucene index search to retrieve the values.  The method returns the fetched values as a list. ",
        "comment_4": "java Fetches a list of values from document fields using the provided field type and format.  Utilizes Lucene indexing and search capabilities to retrieve and format the values. ",
        "comment_5": " Fetches and returns a list of values from document fields using the provided field type and format.  It utilizes Lucene indexing to parse and retrieve the values, ensuring they are in a standardized form.  The method handles the setup of necessary components like SearchLookup and ValueFetcher to achieve this. ",
        "comment_6": "Fetches a list of values from the specified field in the provided document. It utilizes the DocValueFetcher to retrieve the values from the document's field data.",
        "comment_7": "Fetches a list of values from the provided document values for a given field. It utilizes the provided mapper service, field type, format, and source object to retrieve the values.",
        "comment_8": "Fetches a list of values from the provided document's source for the given field.It utilizes a `DocValueFetcher` to extract and parse the values from the document's source based on the provided `MappedFieldType` and `DocValueFormat`. The method leverages Lucene's indexing capabilities to access the document's source and retrieve the field values.",
        "comment_9": "Fetches a list of values from the doc values of a specified field in a given document.",
        "comment_10": " Fetches values from the document using the provided DocValueFormat and returns the result as a list.  It uses the provided MapperService and MappedFieldType to create a SearchLookup and a ValueFetcher.  The fetched values are then returned as a list. ",
        "comment_11": "java Fetches a list of values from a Lucene index using the provided MapperService,   MappedFieldType, DocValueFormat, and Object.   The method adds a document to the index and then retrieves the values using a DocValueFetcher. ",
        "comment_12": "java Fetches a list of values from a Lucene index using the provided mapper service,   mapped field type, doc value format, and source object. ",
        "comment_13": " Fetches the field values from the document using the provided mapper service,   mapped field type, doc value format and source value.   It uses the provided mapper service to parse the source document and   fetches the field values using the doc value format. "
    },
    {
        "method_id": 16183,
        "comment_1": " Perform a reindex with CREATE OpType which has \"create\" semantics. ",
        "method": "\nMethod:\n BulkByScrollResponse reindexCreate(){\n    ReindexRequestBuilder reindex = reindex().source(\"source\").destination(\"dest\").abortOnVersionConflict(false);\n    reindex.destination().setOpType(CREATE);\n    return reindex.get();\n}\nComment:\n",
        "project": "elasticsearch",
        "key": "elasticsearch_16183",
        "comment_2": " Reindexes documents from the \"source\" index to the \"dest\" index, ensuring that no version conflicts abort the process.   The operation type for the destination index is set to CREATE, and the reindexing process is executed and its response returned. ",
        "comment_3": "java Reindexes documents from the \"source\" index to the \"dest\" index, ensuring that the operation type is set to CREATE.  The method configures the reindex request to not abort on version conflicts and returns the response of the reindex operation. ",
        "comment_4": " Reindexes documents from the \"source\" index to the \"dest\" index, ensuring that only new documents are created in the destination.  The operation will not abort on version conflicts. ",
        "comment_5": " Reindexes documents from the source index to the destination index with the specified settings.   Ensures that the operation type is set to CREATE and does not abort on version conflicts. ",
        "comment_6": "This method creates a reindex request to bulk index documents from a source index to a destination index. It uses the bulk by scroll API to efficiently transfer large amounts of data. The method sets the opType to CREATE to ensure that documents are created in the destination index if they do not already exist.",
        "comment_7": "This method creates a reindex request to bulk index documents from a source index to a destination index. It uses the bulk by scroll API to efficiently transfer documents and sets the opType to CREATE to ensure that documents are created in the destination index.",
        "comment_8": "This method creates a reindex request to bulk index documents from a source index to a destination index. It uses the bulk by scroll API to efficiently retrieve and index documents. The method sets the destination index to create new documents.",
        "comment_9": "This method creates a reindex request to reindex documents from a source index to a destination index. It uses the CREATE operation type to create new documents in the destination index if they don't already exist.",
        "comment_10": " Creates a reindex request builder with source and destination indices set, (source and dest)   and abortOnVersionConflict set to false, then sets the operation type to CREATE   and returns the response. ",
        "comment_11": " Creates a reindex request to create new documents in the destination index.  It sets the opType to CREATE and abortOnVersionConflict to false. ",
        "comment_12": " Creates a reindex request to copy data from the source index to the destination index   without aborting on version conflicts and sets the operation type to create. ",
        "comment_13": " Creates a reindex request builder with source and destination indices set,, the opType set to CREATE,   and abortOnVersionConflict set to false, then executes the request and returns the response. "
    },
    {
        "method_id": 115481,
        "comment_1": " Sets the repository name   @param name repository name  return this builder ",
        "method": "\nMethod:\n PutRepositoryRequestBuilder setName(String){\n    request.name(name);\n    return this;\n}\nComment:\n",
        "project": "elasticsearch",
        "key": "elasticsearch_115481",
        "comment_2": " Sets the name of the repository in the request.  This method updates the request object with the provided repository name and returns the builder instance. ",
        "comment_3": " Sets the name for the repository request.  This method updates the request object with the provided name and returns the current builder instance. ",
        "comment_4": " Sets the name for the repository request.  @param name the name to be set for the repository.  return the current instance of PutRepositoryRequestBuilder. ",
        "comment_5": " Sets the name of the repository in the request.  This method updates the request with the provided repository name and returns the builder instance. ",
        "comment_6": "Sets the name of the repository request builder. This method takes a string argument representing the name and sets the name of the request builder using the provided name. It returns the current instance of the builder for method chaining.",
        "comment_7": "Sets the name of the repository in the request builder. This method takes a string argument representing the repository name and sets it in the underlying request object.",
        "comment_8": "Sets the name of the repository in the request builder.",
        "comment_9": "Sets the name of the repository in the request builder.",
        "comment_10": " Sets the name of the repository and returns the current builder instance.  This method allows chaining of method calls to build the PutRepositoryRequest.  The name is retrieved from the request object using the name() method. ",
        "comment_11": " Sets the name of the repository and returns the updated PutRepositoryRequestBuilder instance.  The name is retrieved from the request object using the name() method. ",
        "comment_12": " Sets the name of the PutRepositoryRequest and returns the updated builder. ",
        "comment_13": "Sets the name of the repository and returns the current builder instance. This method is used to configure the repository name. The name can be retrieved later using the name() method."
    },
    {
        "method_id": 31465,
        "comment_1": " Set the global retention. This is expected to be used by the cluster settings to dynamically control the global retention time.  <p>  Even if the current license prevents retention updates, it will accept the change so that they do not need to re-set it if they  upgrade their license (they can always unset it).   @param globalRetention The global retention to use dynamically. ",
        "method": "\nMethod:\n void setGlobalRetention(TimeValue){\n    // notify the user that their setting will be ignored until they get the right license\n    if (licenseState.checkFeature(Feature.MONITORING_UPDATE_RETENTION) == false) {\n        logger.warn(\"[{}] setting will be ignored until an appropriate license is applied\", MonitoringField.HISTORY_DURATION.getKey());\n    }\n    this.globalRetention = globalRetention;\n}\nComment:\n",
        "project": "elasticsearch",
        "key": "elasticsearch_31465",
        "comment_2": " Sets the global retention period for monitoring data. If the appropriate license is not applied,   it logs a warning and indicates that the setting will be ignored. ",
        "comment_3": " Sets the global retention period for monitoring data. If the current license does not support updating the retention setting,   a warning is logged and the setting will be ignored until an appropriate license is applied. ",
        "comment_4": " Sets the global retention time value. Logs a warning if the appropriate license for updating retention is not present. ",
        "comment_5": " Sets the global retention time value. If the appropriate license is not applied, logs a warning indicating that the setting will be ignored.  ",
        "comment_6": "Sets the global retention value. If the license does not support the MONITORING_UPDATE_RETENTION feature, a warning is logged.",
        "comment_7": "Sets the global retention value. If the license does not support the MONITORING_UPDATE_RETENTION feature, a warning is logged.",
        "comment_8": "Sets the global retention time for the application. If the user does not have the appropriate license, a warning message is logged.",
        "comment_9": "Sets the global retention time value. If the license does not support this feature, a warning message is logged.",
        "comment_10": " Sets the global retention period, but warns the user if the license does not support monitoring update retention. ",
        "comment_11": "java Sets the global retention time value and logs a warning if the current license does not support monitoring update retention.    @param globalRetention the new global retention time value ",
        "comment_12": " Sets the global retention period and logs a warning if the current license does not support monitoring update retention. ",
        "comment_13": " Sets the global retention period, but warns the user if the current license does not support monitoring update retention. "
    },
    {
        "method_id": 101366,
        "comment_1": " Registers a new request handler   @param action                The action the request handler is associated with  @param requestReader               The request class that will be used to construct new instances for streaming  @param executor              The executor the request handling will be executed on  @param forceExecution        Force execution on the executor queue and never reject it  @param canTripCircuitBreaker Check the request size and raise an exception in case the limit is breached.  @param handler               The handler itself that implements the request handling ",
        "method": "\nMethod:\n void registerRequestHandler(String, String, boolean, boolean, Writeable.Reader, TransportRequestHandler){\n    validateActionName(action);\n    handler = interceptor.interceptHandler(action, executor, forceExecution, handler);\n    RequestHandlerRegistry<Request> reg = new RequestHandlerRegistry<>(action, requestReader, taskManager, handler, executor, forceExecution, canTripCircuitBreaker);\n    transport.registerRequestHandler(reg);\n}\nComment:\n",
        "project": "elasticsearch",
        "key": "elasticsearch_101366",
        "comment_2": " Registers a new request handler for a specific action. It validates the action name, intercepts the handler, and then   creates a RequestHandlerRegistry instance which is subsequently registered with the transport service. ",
        "comment_3": " Registers a request handler for a specific action, applying any necessary interceptors and validations.  The method ensures the handler is properly configured and then registers it with the transport layer. ",
        "comment_4": " Registers a request handler for a specific action, applying any necessary interceptors and validations.  This method ensures the handler is properly configured and registered with the transport layer. ",
        "comment_5": " Registers a new request handler for a specific action. The handler is validated, potentially intercepted, and then registered with the transport service. This ensures that the handler is properly set up and can handle incoming requests for the specified action. ",
        "comment_6": "Registers a request handler with the transport for a given action name. The method validates the action name, intercepts the handler if necessary, and registers the request handler with the transport.",
        "comment_7": "Registers a new request handler with the transport service. The handler is intercepted and validated before being registered.",
        "comment_8": "Registers a new request handler with the transport service. The method validates the action name, intercepts the handler using the interceptor, and registers the request handler with the transport service.",
        "comment_9": "Registers a request handler for the given action name and configuration.",
        "comment_10": " Registers a request handler with the transport service,   allowing it to handle requests for the specified action,   and optionally forcing execution and tripping circuit breakers. ",
        "comment_11": "java Registers a request handler with the transport layer.   It validates the action name, intercepts the handler with an interceptor,   creates a request handler registry and registers it with the transport.    @param action the action name  @param executor the executor to use  @param forceExecution whether to force execution  @param canTripCircuitBreaker whether the circuit breaker can be tripped  @param requestReader the request reader  @param handler the handler to register ",
        "comment_12": " Registers a request handler with the transport layer.  It validates the action name, intercepts the handler with the interceptor,   creates a new request handler registry and registers it with the transport. ",
        "comment_13": "Registers a request handler with the transport service, intercepting the handler with the interceptor if necessary, and allowing for forced execution and circuit breaker tripping."
    },
    {
        "method_id": 14007,
        "comment_1": " test that the relevant rating threshold can be set to something larger than  1. e.g. we set it to 2 here and expect dics 0-2 to be not relevant, so first  relevant doc has third ranking position, so RR should be 13 ",
        "method": "\nMethod:\n void testPrecisionAtFiveRelevanceThreshold(){\n    List<RatedDocument> rated = new ArrayList<>();\n    rated.add(new RatedDocument(\"test\", \"0\", 0));\n    rated.add(new RatedDocument(\"test\", \"1\", 1));\n    rated.add(new RatedDocument(\"test\", \"2\", 2));\n    rated.add(new RatedDocument(\"test\", \"3\", 3));\n    rated.add(new RatedDocument(\"test\", \"4\", 4));\n    SearchHit[] hits = createSearchHits(0, 5, \"test\");\n    MeanReciprocalRank reciprocalRank = new MeanReciprocalRank(2, 10);\n    EvalQueryQuality evaluation = reciprocalRank.evaluate(\"id\", hits, rated);\n    assertEquals((double) 1 / 3, evaluation.metricScore(), 0.00001);\n    assertEquals(3, ((MeanReciprocalRank.Detail) evaluation.getMetricDetails()).getFirstRelevantRank());\n}\nComment:\n",
        "project": "elasticsearch",
        "key": "elasticsearch_14007",
        "comment_2": " Tests the precision of the Mean Reciprocal Rank (MRR) metric at a relevance threshold of 2 for the top 5 search hits.  Verifies that the MRR score and the rank of the first relevant document are correctly calculated. ",
        "comment_3": " Tests the precision at five relevance threshold by evaluating the Mean Reciprocal Rank (MRR) for a set of rated documents and search hits.  Asserts that the MRR score is correctly calculated and verifies the rank of the first relevant document. ",
        "comment_4": " Tests the precision at a relevance threshold of 5 by evaluating the Mean Reciprocal Rank (MRR) for a set of rated documents.  Asserts that the MRR score and the rank of the first relevant document are as expected. ",
        "comment_5": "java Tests the precision at a relevance threshold of five by evaluating the Mean Reciprocal Rank (MRR)   for a set of rated documents and search hits. Asserts that the MRR score and the first relevant rank   are correctly calculated. ",
        "comment_6": "This method tests the precision of the search results at a relevance threshold of five. It creates a list of rated documents and a set of search hits, then evaluates the search results using a MeanReciprocalRank evaluator. The method asserts that the reciprocal rank is equal to 13 and that the first relevant rank is 3.",
        "comment_7": "This method tests the precision of the search results at a relevance threshold of five. It creates a list of rated documents and a set of search hits, then evaluates the search results using the MeanReciprocalRank metric. The method asserts that the Mean Reciprocal Rank is equal to 13 and that the first relevant rank is 3.",
        "comment_8": "This method tests the precision of the search results at a relevance threshold of five. It creates a list of rated documents and a set of search hits, then uses the MeanReciprocalRank class to evaluate the quality of the search results. The expected mean reciprocal rank is 13, and the expected first relevant rank is 3.",
        "comment_9": "This method tests the precision of the search results at a relevance threshold of five. It creates a list of rated documents and a set of search hits, then evaluates the search results using the MeanReciprocalRank metric. The method asserts that the expected Mean Reciprocal Rank score is 13 and the first relevant rank is 3.",
        "comment_10": " Tests the precision of the MeanReciprocalRank evaluation metric at a relevance threshold of 5,   verifying that the metric score is 13 and the first relevant rank is 3. ",
        "comment_11": " Tests the precision of the MeanReciprocalRank evaluation metric at a relevance threshold of 5.   It asserts that the metric score is 13 and the first relevant rank is 3. ",
        "comment_12": " Tests the precision of the MeanReciprocalRank evaluation metric at a relevance threshold of 5,   asserting that the metric score is 13 and the first relevant rank is 3. ",
        "comment_13": " Tests the precision at a relevance threshold of 5 by creating a list of rated documents,   a set of search hits, and evaluating the mean reciprocal rank with a threshold of 2 and a maximum rank of 10. "
    },
    {
        "method_id": 93836,
        "comment_1": " Close the shell of the polygon ",
        "method": "\nMethod:\n PolygonBuilder close(){\n    shell.close();\n    return this;\n}\nComment:\n",
        "project": "elasticsearch",
        "key": "elasticsearch_93836",
        "comment_2": " Closes the current polygon by ensuring its shell is a closed loop.  Returns the current PolygonBuilder instance for method chaining. ",
        "comment_3": "java Closes the current polygon by ensuring the shell's coordinates form a closed loop.  Returns the PolygonBuilder instance for method chaining. ",
        "comment_4": " Closes the current shell of the polygon by connecting the last point to the first point.  Returns the current instance of PolygonBuilder for method chaining. ",
        "comment_5": " Closes the current shell by adding the starting point as the end point if they are not already the same.  Returns the current PolygonBuilder instance for method chaining. ",
        "comment_6": "This method closes the polygon by connecting the last point to the first point. It ensures that the polygon is closed by checking if the first and last points are the same.",
        "comment_7": "Closes the polygon by adding the starting point as the end point. This method ensures that the polygon is closed by connecting the first and last points.",
        "comment_8": "Closes the polygon by adding the starting point of the shell as the end point. This method has no effect if the starting and end points are already the same.",
        "comment_9": "Closes the current polygon by connecting the last point to the first point. Returns the PolygonBuilder object for method chaining.",
        "comment_10": " Closes the polygon by closing the current line string and returns the PolygonBuilder instance. ",
        "comment_11": " Closes the polygon by connecting the last point to the first point if they are not the same,   and marks the shell as closed.   Returns the PolygonBuilder instance for method chaining. ",
        "comment_12": " Closes the current polygon and returns the PolygonBuilder instance for method chaining. ",
        "comment_13": " Closes the polygon by closing the current line string and returns the polygon builder.  This will have no effect if the starting and end points of the line string are already the same. "
    },
    {
        "method_id": 109794,
        "comment_1": " Parses the given Settings and creates the appropriate @link Normalization   @param settings Settings to parse  return @link Normalization referred to in the Settings ",
        "method": "\nMethod:\n Normalization parseNormalization(Settings){\n    String normalization = settings.get(\"normalization\");\n    if (\"no\".equals(normalization)) {\n        return new Normalization.NoNormalization();\n    } else if (\"h1\".equals(normalization)) {\n        float c = settings.getAsFloat(\"normalization.h1.c\", 1f);\n        return new NormalizationH1(c);\n    } else if (\"h2\".equals(normalization)) {\n        float c = settings.getAsFloat(\"normalization.h2.c\", 1f);\n        return new NormalizationH2(c);\n    } else if (\"h3\".equals(normalization)) {\n        float c = settings.getAsFloat(\"normalization.h3.c\", 800f);\n        return new NormalizationH3(c);\n    } else if (\"z\".equals(normalization)) {\n        float z = settings.getAsFloat(\"normalization.z.z\", 0.30f);\n        return new NormalizationZ(z);\n    } else {\n        throw new IllegalArgumentException(\"Unsupported Normalization [\" + normalization + \"]\");\n    }\n}\nComment:\n",
        "project": "elasticsearch",
        "key": "elasticsearch_109794",
        "comment_2": "java Parses the normalization settings and returns the corresponding Normalization object.  Supports various normalization types such as \"no\", \"h1\", \"h2\", \"h3\", and \"z\", each with specific parameters.  Throws IllegalArgumentException for unsupported normalization types. ",
        "comment_3": " Parses the normalization settings from the provided `Settings` object and returns the corresponding `Normalization` instance.  Supports various normalization types such as \"no\", \"h1\", \"h2\", \"h3\", and \"z\", each with specific parameters.  Throws an `IllegalArgumentException` if the normalization type is unsupported. ",
        "comment_4": " Parses the normalization settings and returns the corresponding Normalization object.  Throws an IllegalArgumentException if the normalization type is unsupported. ",
        "comment_5": " Parses the normalization settings and returns the appropriate Normalization object based on the provided settings.  Supports various normalization types such as \"no\", \"h1\", \"h2\", \"h3\", and \"z\", each with their specific parameters.  Throws an IllegalArgumentException if the normalization type is unsupported. ",
        "comment_6": "This method parses the normalization setting from the provided settings object. It returns a corresponding normalization object based on the specified normalization type. If an unsupported normalization type is encountered, it throws an IllegalArgumentException.",
        "comment_7": "This method parses the normalization setting from the provided settings object and returns the corresponding normalization object. It supports various normalization types such as \"no\", \"h1\", \"h2\", \"h3\", and \"z\", each with its own specific parameters.",
        "comment_8": "This method parses the normalization type from the settings and returns a corresponding normalization object.",
        "comment_9": "This method parses the normalization setting from the provided settings object and returns a corresponding normalization object. It supports various normalization types such as no normalization, H1, H2, H3, and Z normalization, each with configurable parameters.",
        "comment_10": " Returns a Normalization object based on the normalization type specified in the settings.  The normalization type can be one of \"no\", \"h1\", \"h2\", \"h3\", or \"z\".  If the normalization type is not recognized, an IllegalArgumentException is thrown. ",
        "comment_11": "java Returns a Normalization object based on the normalization type specified in the settings.  The normalization type can be one of \"no\", \"h1\", \"h2\", \"h3\", or \"z\".  If an unsupported normalization type is specified, an IllegalArgumentException is thrown.  Returns a Normalization object based on the normalization type specified in the settings.  The normalization type can be one of \"no\", \"h1\", \"h2\", \"h3\", or \"z\".  If an unsupported normalization type is specified, an IllegalArgumentException is thrown. ",
        "comment_12": "  Returns a Normalization object based on the normalization type specified in the settings.  The supported normalization types are \"no\", \"h1\", \"h2\", \"h3\", and \"z\".  If an unsupported normalization type is specified, an IllegalArgumentException is thrown. ",
        "comment_13": " Returns a Normalization object based on the normalization type specified in the settings.  The normalization type can be one of \"no\", \"h1\", \"h2\", \"h3\", or \"z\".  If an unsupported normalization type is specified, an IllegalArgumentException is thrown. "
    },
    {
        "method_id": 9288,
        "comment_1": " Put trained model config asynchronously and notifies listener upon completion  <p>  For additional info  see <a href=\"TODO\">      PUT Trained Model Config documentation<a>   @param request The @link PutTrainedModelRequest  @param options Additional request options (e.g. headers), use @link RequestOptions#DEFAULT if nothing needs to be customized  @param listener Listener to be notified upon request completion  return cancellable that may be used to cancel the request ",
        "method": "\nMethod:\n Cancellable putTrainedModelAsync(PutTrainedModelRequest, RequestOptions, ActionListener){\n    return restHighLevelClient.performRequestAsyncAndParseEntity(request, MLRequestConverters::putTrainedModel, options, PutTrainedModelResponse::fromXContent, listener, Collections.emptySet());\n}\nComment:\n",
        "project": "elasticsearch",
        "key": "elasticsearch_9288",
        "comment_2": " Asynchronously sends a request to put a trained model and parses the response.  Returns a Cancellable instance that can be used to cancel the request if needed. ",
        "comment_3": "java Asynchronously sends a request to put a trained machine learning model and parses the response.  Utilizes the high-level REST client to handle the request and response processing. ",
        "comment_4": " Asynchronously sends a request to put a trained machine learning model and parses the response.  Utilizes the provided request, options, and listener to handle the asynchronous operation. ",
        "comment_5": " Asynchronously sends a request to put a trained model and parses the response.  Returns a Cancellable instance that can be used to cancel the request if needed. ",
        "comment_6": "Asynchronously puts a trained model to the specified location. This method utilizes the provided request converter to parse the response entity and returns a Cancellable object representing the asynchronous operation.",
        "comment_7": "Asynchronously puts a trained model to the specified location. This method returns a Cancellable instance that may be used to cancel the request.",
        "comment_8": "Asynchronously puts a trained model to the specified location. This method returns a Cancellable instance that can be used to cancel the request.",
        "comment_9": " Asynchronously puts a trained model to the specified location. This method returns a Cancellable object that can be used to cancel the request.",
        "comment_10": " Asynchronously puts a trained model with the provided request and options,   parsing the response into a PutTrainedModelResponse object and invoking the ActionListener.  Returns a Cancellable instance that may be used to cancel the request. ",
        "comment_11": " Asynchronously puts a trained model with the provided request and options,   parsing the response entity into a PutTrainedModelResponse object,   and notifies the provided listener upon completion. ",
        "comment_12": " Asynchronously puts a trained model with the provided request and options,   parsing the response into a PutTrainedModelResponse and notifying the listener. ",
        "comment_13": " Asynchronously puts a trained model with the provided request and options,   parsing the response into a PutTrainedModelResponse and invoking the listener upon completion. "
    },
    {
        "method_id": 14410,
        "comment_1": " Feeds and drains the audio processor up to the end of track one, returning the total output  size in bytes. ",
        "method": "\nMethod:\n int feedAndDrainAudioProcessorToEndOfTrackOne(){\n    // Feed and drain the processor, simulating a gapless transition to another track.\n    ByteBuffer inputBuffer = ByteBuffer.allocate(TRACK_ONE_BUFFER_SIZE_BYTES);\n    int outputSize = 0;\n    while (!trimmingAudioProcessor.isEnded()) {\n        if (inputBuffer.hasRemaining()) {\n            trimmingAudioProcessor.queueInput(inputBuffer);\n            if (!inputBuffer.hasRemaining()) {\n                // Reconfigure for a next track then begin draining.\n                trimmingAudioProcessor.setTrimFrameCount(TRACK_TWO_TRIM_START_FRAME_COUNT, TRACK_TWO_TRIM_END_FRAME_COUNT);\n                trimmingAudioProcessor.configure(AUDIO_FORMAT);\n                trimmingAudioProcessor.queueEndOfStream();\n            }\n        }\n        ByteBuffer outputBuffer = trimmingAudioProcessor.getOutput();\n        outputSize += outputBuffer.remaining();\n        outputBuffer.clear();\n    }\n    trimmingAudioProcessor.reset();\n    return outputSize;\n}\nComment:\n",
        "project": "ExoPlayer",
        "key": "ExoPlayer_14410",
        "comment_2": " Feeds and drains the audio processor to simulate a gapless transition between two tracks.   Configures the processor to trim frames from the start and end of the second track and queues the end of the stream.   Returns the total size of the output buffer after processing. ",
        "comment_3": " Feeds and drains the audio processor to simulate a gapless transition to another track.   Configures the processor for the next track and queues the end of the stream once the input buffer is exhausted.   Returns the total size of the output produced during this process. ",
        "comment_4": " Feeds and drains the audio processor to simulate a gapless transition to the next track.  Returns the total size of the output buffer after processing. ",
        "comment_5": " Feeds and drains the audio processor to simulate a gapless transition to another track.   Configures the processor to trim frames from the start and end of the next track and queues the end of the stream.   Returns the total size of the output buffer after processing. ",
        "comment_6": "This method simulates a gapless transition to another track by feeding and draining the audio processor. It sets the trim frame count for the next track, feeds input data to the processor, and retrieves the output. The method continues until the processor is ended and the output buffer is empty.",
        "comment_7": "This method simulates a gapless transition to another track by feeding and draining the audio processor. It configures the processor for the next track and drains the remaining audio data.",
        "comment_8": "This method simulates a gapless transition to another track by feeding and draining the audio processor. It configures the processor for the next track and drains the remaining audio.",
        "comment_9": "This method simulates a gapless transition to another track by feeding and draining the trimming audio processor. It configures the processor for the next track and returns the total size of the processed audio.",
        "comment_10": " Simulates a gapless transition to another track by feeding and draining the audio processor   until it reaches the end of the first track, then reconfigures it for the next track. ",
        "comment_11": "java Simulates a gapless transition to another track by feeding and draining the audio processor to the end of the first track.  It reconfigures the processor for the next track and returns the total output size. ",
        "comment_12": " Simulates a gapless transition to another track by feeding and draining the audio processor to the end of the first track,   reconfiguring it for the next track, and returning the total output size. ",
        "comment_13": " Simulates a gapless transition to another track by feeding and draining the audio processor   until it reaches the end of the first track, then reconfigures it for the next track. "
    },
    {
        "method_id": 24457,
        "comment_1": " FileSystem.[setQuota, getQuotaUsage, getContentSummary,  setQuotaByStorageType] API call should succeed without failure.  throws IOException if any IO operation failed. ",
        "method": "\nMethod:\n void testQuota(){\n    final Path qDir = new Path(\"/quotaDir\");\n    fs.mkdirs(qDir);\n    fs.setQuota(qDir, 6, HdfsConstants.QUOTA_DONT_SET);\n    QuotaUsage usage = fs.getQuotaUsage(qDir);\n    assertEquals(fs.getContentSummary(qDir), usage);\n    fs.setQuotaByStorageType(qDir, StorageType.DEFAULT, 10);\n}\nComment:\n",
        "project": "hadoop",
        "key": "hadoop_24457",
        "comment_2": " Tests the quota management functionality by creating a directory, setting its namespace and storage type quotas, and verifying the quota usage.  It ensures that the content summary matches the quota usage and updates the storage type quota for the directory. ",
        "comment_3": " Tests the quota management functionality by creating a directory, setting a namespace quota,   and verifying the quota usage. It also sets a storage type quota and ensures the content summary   matches the quota usage. ",
        "comment_4": " Tests the quota settings for a specified directory in HDFS by creating the directory, setting a namespace quota, and verifying the quota usage. ",
        "comment_5": " Tests the quota management functionality by creating a directory, setting its quota, and verifying the quota usage.  It also sets a storage type-specific quota and ensures the content summary matches the quota usage. ",
        "comment_6": "This method tests the functionality of setting and retrieving quota information for a directory. It creates a directory, sets quotas for both namespace and storage space, retrieves the quota usage, and verifies that the retrieved usage matches the content summary of the directory.",
        "comment_7": "This method tests the quota functionality of the HDFS filesystem. It creates a directory, sets a quota on it, verifies the quota usage, and then sets a quota by storage type.",
        "comment_8": "This method tests the quota functionality of the HDFS filesystem. It creates a directory, sets a quota on it, retrieves the quota usage, and verifies that the quota is set correctly.",
        "comment_9": "This method tests the functionality of setting and retrieving quotas for a directory. It creates a directory, sets a quota on it, retrieves the quota usage, and verifies that the quota usage matches the directory's content summary.",
        "comment_10": " Tests the quota functionality by creating a directory, setting its quota,   retrieving the quota usage, and verifying that the quota usage matches   the content summary of the directory.  ",
        "comment_11": " Tests the quota functionality by creating a directory, setting a quota,   verifying the quota usage, and then updating the quota by storage type. ",
        "comment_12": " Tests the quota functionality by creating a quota directory, setting a quota,   verifying the quota usage, and then updating the quota by storage type. ",
        "comment_13": " Tests the quota functionality by creating a directory, setting its quota,   verifying the quota usage, and then modifying the quota by storage type. "
    },
    {
        "method_id": 2299,
        "comment_1": " Set the source path to the specified storage policy.   @param path The source path referring to either a directory or a file.  throws IOException ",
        "method": "\nMethod:\n void satisfyStoragePolicy(Path){\n    dfs.satisfyStoragePolicy(path);\n}\nComment:\n",
        "project": "hadoop",
        "key": "hadoop_2299",
        "comment_2": " Ensures that the specified path satisfies the storage policy requirements.  Delegates the operation to the underlying distributed file system.  @param path The path referring to either a directory or a file. ",
        "comment_3": " Triggers the satisfaction of the storage policy for the specified path in the distributed file system.  This method delegates the operation to the underlying DFS implementation. ",
        "comment_4": "java Ensures that the specified path complies with the storage policy defined in the distributed file system.   @param path the path in the file system to be checked and adjusted according to the storage policy ",
        "comment_5": " Ensures that the specified path complies with the storage policy.   Delegates the task to the underlying DFS implementation. ",
        "comment_6": "This method calls the satisfyStoragePolicy method of the DistributedFileSystem object. It is used to ensure that the storage policy is satisfied for a given path.",
        "comment_7": "This method satisfies the storage policy for a given path. It utilizes the DFS client to perform the operation.",
        "comment_8": "This method satisfies the storage policy for a given path. It utilizes the DFS client to perform the storage policy satisfaction operation.",
        "comment_9": "This method satisfies the storage policy for a given path. It utilizes the DFS client to perform the policy satisfaction operation.",
        "comment_10": " Satisfies the storage policy for the given path by recursively traversing the file system and   invoking the satisfyStoragePolicy method on the DistributedFileSystem instance. ",
        "comment_11": "java Satisfies the storage policy for the given path by recursively traversing   the file system and applying the policy to each path component. ",
        "comment_12": " Delegates the satisfaction of the storage policy for the given path to the dfs object. ",
        "comment_13": " Delegates the satisfaction of storage policy to the dfs object.  This method is a wrapper around dfs's satisfyStoragePolicy method. "
    },
    {
        "method_id": 6277,
        "comment_1": " Reuses a previous freed instance or creates a new instance and set it to reflect the specified native object ",
        "method": "\nMethod:\n btBroadphaseProxy obtain(long, boolean){\n    final btBroadphaseProxy result = pool.obtain();\n    result.reset(cPtr, own);\n    return result;\n}\nComment:\n",
        "project": "libgdx",
        "key": "libgdx_6277",
        "comment_2": " Obtains a btBroadphaseProxy object from the pool, resetting it with the provided parameters.   This method ensures the object is either newly created or reused from the pool. ",
        "comment_3": "java Obtains a btBroadphaseProxy object from the pool, resets it with the provided parameters, and returns it. ",
        "comment_4": " Obtains a btBroadphaseProxy instance from the pool, resets it with the provided parameters, and returns it. ",
        "comment_5": " Obtains a btBroadphaseProxy object from the pool and resets it with the provided parameters.   The object may be newly created or reused from the pool. ",
        "comment_6": "This method obtains a btBroadphaseProxy object from a pool. It resets the obtained object with the provided cPtr and own values. The method returns the reset btBroadphaseProxy object.",
        "comment_7": "This method obtains a btBroadphaseProxy object from a pool. It resets the object using the provided cPtr and own values before returning it.",
        "comment_8": "This method obtains a btBroadphaseProxy object from a pool. It resets the object using the provided cPtr and own values before returning it.",
        "comment_9": "This method obtains a btBroadphaseProxy object from a pool. It resets the object with the provided cPtr and own values and returns the reset object.",
        "comment_10": " Obtains a btBroadphaseProxy object from the pool, resets it with the given cPtr and own values,   and returns it. ",
        "comment_11": " Obtains a btBroadphaseProxy object from the pool, resets it with the given native pointer and ownership flag,   and returns the obtained proxy. ",
        "comment_12": " Returns a btBroadphaseProxy object from the pool, resets it with the given cPtr and own values,   and returns it for use. ",
        "comment_13": " Returns a btBroadphaseProxy object from the pool, resets it with the given cPtr and own values,   and returns it for use. "
    },
    {
        "method_id": 43089,
        "comment_1": " Normalizes the up vector by first calculating the right vector via a cross product between direction and up, and then  recalculating the up vector via a cross product between right and direction. ",
        "method": "\nMethod:\n void normalizeUp(){\n    tmpVec.set(direction).crs(up);\n    up.set(tmpVec).crs(direction).nor();\n}\nComment:\n",
        "project": "libgdx",
        "key": "libgdx_43089",
        "comment_2": " Adjusts the 'up' vector to be orthogonal to the 'direction' vector and normalizes it.   This ensures that the 'up' vector is correctly aligned relative to the 'direction' vector. ",
        "comment_3": "java Adjusts the 'up' vector to be orthogonal to the 'direction' vector and normalizes it.  This ensures that the 'up' vector is correctly aligned relative to the 'direction' vector. ",
        "comment_4": " Adjusts the 'up' vector to be orthogonal to the 'direction' vector and normalizes it.  This ensures that the 'up' vector is correctly aligned relative to the 'direction' vector. ",
        "comment_5": " Normalizes the 'up' vector to be orthogonal to the 'direction' vector.   This ensures that 'up' is recalculated to maintain a right-angle relationship with 'direction'. ",
        "comment_6": "This method normalizes the up vector to ensure it is perpendicular to the direction vector. It calculates a temporary vector by taking the cross product of the direction vector and the up vector. Then, it sets the up vector to the cross product of the temporary vector and the direction vector, and finally normalizes the up vector.",
        "comment_7": "Normalizes the up vector to be perpendicular to the direction vector.",
        "comment_8": "This method normalizes the up vector to be perpendicular to the direction vector. It does this by calculating the cross product of the direction vector and the up vector, then setting the up vector to the cross product of the temporary vector and the direction vector.",
        "comment_9": "This method normalizes the up vector to ensure it is perpendicular to the direction vector. It calculates the cross product of the direction vector and the up vector, then normalizes the result to create a new up vector.",
        "comment_10": " Normalizes the up vector by crossing it with the direction vector and then normalizing the result.  This method assumes that the direction vector is already normalized.  It uses a temporary vector to avoid modifying the original up vector. ",
        "comment_11": " Normalizes the up vector with respect to the direction vector.  It first calculates the cross product of the direction and up vectors,   then sets the up vector to the cross product and normalizes it. ",
        "comment_12": " Normalizes the up vector by taking the cross product with the direction vector and then normalizing the result. ",
        "comment_13": " Normalizes the up vector by crossing it with the direction vector and then normalizing the result.  This method assumes that the direction vector is already normalized.  It uses a temporary vector to avoid modifying the original up vector. "
    },
    {
        "method_id": 920,
        "comment_1": " Returns the value of a named header.  @param name header key to retrieve a value for  return the header value ",
        "method": "\nMethod:\n String getHeader(String){\n    return headers.get(name);\n}\nComment:\n",
        "project": "nutch",
        "key": "nutch_920",
        "comment_2": " Retrieves the value of the specified header name from the headers map.  If multiple values exist for the header, the first one is returned.   @param name the name of the header to retrieve.  return the value associated with the specified header name, or null if not found. ",
        "comment_3": " Retrieves the value of the specified header from the headers map.  Returns the first value associated with the header name, or null if the header is not present. ",
        "comment_4": " Retrieves the value of a header by its name.  @param name the name of the header to retrieve.  return the value of the specified header, or null if the header does not exist. ",
        "comment_5": " Retrieves the value of the specified header name from the headers map.  If multiple values are associated with the name, the first one is returned.   @param name the name of the header to retrieve.  return the value associated with the specified header name. ",
        "comment_6": "Retrieves the header value associated with the given name from a collection of headers.",
        "comment_7": "Retrieves the header value associated with the given name from the headers map.",
        "comment_8": "Retrieves the header value associated with the given name from the headers map.",
        "comment_9": "Retrieves the header value associated with a given name from a map of headers.",
        "comment_10": " Retrieves the header value associated with the given name.  If multiple values are associated with the name, the first one is returned. ",
        "comment_11": " Returns the first value associated with the given name from the headers map.  If no value is found, (i.e., the name does not exist in the headers map),   it returns null. ",
        "comment_12": " Retrieves the HTTP header value associated with the given name.    @param name the name of the HTTP header  return the value of the HTTP header ",
        "comment_13": " Retrieves the header value associated with the provided name.  If multiple values are associated with the name, the first one is returned. "
    },
    {
        "method_id": 2433,
        "comment_1": " This will set interior color of the drawn area.   @param color The interior color of the circle. ",
        "method": "\nMethod:\n void setInteriorColor(Color){\n    COSArray array = null;\n    if (color != null) {\n        array = COSArray.of(color.getRGBColorComponents(null));\n    }\n    annot.setItem(COSName.IC, array);\n}\nComment:\n",
        "project": "pdf",
        "key": "pdf_2433",
        "comment_2": " Sets the interior color of the annotation. If the provided color is not null, it converts the color to its RGB components and stores it in the annotation dictionary. If the color is null, it removes the interior color entry from the dictionary. ",
        "comment_3": "java Sets the interior color of the annotation. If the provided color is not null, it converts the color to its RGB components and stores it in the annotation's COSArray. ",
        "comment_4": "java Sets the interior color of the annotation using the provided Color object.  If the color is null, the interior color is removed. ",
        "comment_5": " Sets the interior color of the annotation. If the provided color is null, the interior color is removed. ",
        "comment_6": "Sets the interior color of the annotation. It takes a Color object as input and sets the IC entry in the annotation dictionary to the RGB color components of the input color.",
        "comment_7": "Sets the interior color of the annotation. This method takes a Color object as input and sets the IC entry in the annotation dictionary to the RGB color components of the input color.",
        "comment_8": "Sets the interior color of the annotation.",
        "comment_9": "Sets the interior color of the annotation to the specified color. If the color is null, the interior color is set to transparent.",
        "comment_10": " Sets the interior color of an annotation to the specified color.  If the color is null, the interior color is removed. ",
        "comment_11": " Sets the interior color of the annotation to the specified color.  If the color is null, the interior color is not set. ",
        "comment_12": " Sets the interior color of the annotation to the specified color.  If the color is null, the interior color is not set. ",
        "comment_13": " Sets the interior color of an annotation to the specified color.   If the color is null, the interior color is removed. "
    },
    {
        "method_id": 4749,
        "comment_1": " This will get the creation date of the document.  This will return null if no creation date exists.   return The creation date of the document. ",
        "method": "\nMethod:\n Calendar getCreationDate(){\n    return info.getDate(COSName.CREATION_DATE);\n}\nComment:\n",
        "project": "pdf",
        "key": "pdf_4749",
        "comment_2": " Retrieves the creation date from the document's metadata.  Utilizes the dictionary key for the creation date to fetch and return the corresponding Calendar object. ",
        "comment_3": " Retrieves the creation date of the document.   If the creation date is not available, it returns a default value. ",
        "comment_4": " Retrieves the creation date of the document.  return a Calendar object representing the document's creation date. ",
        "comment_5": " Retrieves the creation date of the document from the associated metadata.  Utilizes the `getDate` method to fetch the date corresponding to the `CREATION_DATE` key. ",
        "comment_6": "This method retrieves the creation date of a document from the document information dictionary. It uses the COSName.CREATION_DATE key to access the creation date and returns it as a Calendar object.",
        "comment_7": "This method retrieves the creation date of the document from the document information dictionary. It uses the getDate method to retrieve the date associated with the CREATION_DATE key.",
        "comment_8": "This method retrieves the creation date of the document from the document information dictionary.",
        "comment_9": " This method retrieves the creation date of a document. It accesses the creation date information from the document's metadata using the COSName.CREATION_DATE key.",
        "comment_10": " Returns the creation date of the document as a Calendar object.  This method retrieves the creation date from the document's info dictionary. ",
        "comment_11": " Returns the creation date of the document as a Calendar object.  The creation date is retrieved from the document information dictionary.  If the creation date is not available, a default value is returned. ",
        "comment_12": " Returns the creation date of the PDF document. ",
        "comment_13": " Returns the creation date of the document as a Calendar object. "
    },
    {
        "method_id": 3444,
        "comment_1": " This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section.   return The ending style for the start point, LE_NONE if missing, never null. ",
        "method": "\nMethod:\n String getStartPointEndingStyle(){\n    COSArray array = getCOSObject().getCOSArray(COSName.LE);\n    if (array != null && array.size() >= 2) {\n        return array.getName(0, LE_NONE);\n    }\n    return LE_NONE;\n}\nComment:\n",
        "project": "pdf",
        "key": "pdf_3444",
        "comment_2": " Retrieves the starting point ending style from a COSArray.   If the array is present and has at least two elements, it returns the name of the first element; otherwise, it returns a default value. ",
        "comment_3": " Retrieves the name of the starting point ending style from a COSArray.  If the array is null or has fewer than two elements, it returns a default value. ",
        "comment_4": " Retrieves the starting point ending style from a COSArray.   Returns a default value if the array is null or does not contain at least two elements. ",
        "comment_5": " Retrieves the starting point ending style from a COSArray if it exists and has at least two elements.   Returns the name at the first index of the array or a default value if the array is null or has fewer than two elements. ",
        "comment_6": "This method retrieves the starting point and ending style of a line element. It accesses the line element's array of style information and returns the name of the first style if the array has at least two elements. Otherwise, it returns a default style value.",
        "comment_7": "This method retrieves the starting point and ending style of a line element. It accesses the line element's array of style information and returns the first two elements as a string. If the array is empty or does not contain at least two elements, it returns a default value of \"LE_NONE\".",
        "comment_8": "This method retrieves the starting point and ending style of a line. It accesses the COSArray object associated with the key \"LE\" and extracts the first two elements as the starting point and ending style. If the array is null or does not have at least two elements, it returns \"LE_NONE\".",
        "comment_9": "This method retrieves the start point and ending style of a line element. It checks if the line element has a valid array of styles and returns the first style if it exists, otherwise it returns a default style.",
        "comment_10": " Returns the first element of the LE array as a string, or LE_NONE if the array is null or has less than two elements. ",
        "comment_11": " Retrieves the ending style of the start point from the COSArray object.  It checks if the COSArray object is not null and has at least two elements.  If the conditions are met, it returns the name of the first element; otherwise, it returns LE_NONE. ",
        "comment_12": " Returns the ending style of the start point of a line in a PDF document.  The ending style is retrieved from the COSArray object associated with the LE key.  Returns LE_NONE if the COSArray object is null or does not contain at least two elements. ",
        "comment_13": " Returns the first element of the COSArray associated with the COSName.LE,   or LE_NONE if the array is null or has less than two elements. "
    },
    {
        "method_id": 860,
        "comment_1": " Paint a selected line  @param g Graphics instance.  @param x int. x axis value.  @param y int. y axis value. ",
        "method": "\nMethod:\n void paintInSelected(Graphics, int, int){\n    g.setFont(HexView.BOLD_FONT);\n    char[] content = model.getLineChars(selectedLine);\n    g.drawChars(content, 0, selectedIndexInLine - 0, x, y);\n    g.setColor(HexView.SELECTED_COLOR);\n    x += g.getFontMetrics().charsWidth(content, 0, selectedIndexInLine - 0);\n    g.drawChars(content, selectedIndexInLine, 1, x, y);\n    g.setColor(Color.black);\n    x += g.getFontMetrics().charWidth(content[selectedIndexInLine]);\n    g.drawChars(content, selectedIndexInLine + 1, (content.length - 1) - selectedIndexInLine, x, y);\n    g.setFont(HexView.FONT);\n}\nComment:\n",
        "project": "pdf",
        "key": "pdf_860",
        "comment_2": " Renders the selected line of text with specific styling for the selected character.  The method sets the font, draws the characters up to the selected index, highlights the selected character, and then draws the remaining characters.  It ensures the selected character is displayed in a different color and the rest in the default color. ",
        "comment_3": " Paints the selected line of text with specific formatting. The method highlights the selected character within the line and adjusts the font and color accordingly. It ensures the selected character is visually distinct from the rest of the line. ",
        "comment_4": " Paints the selected line of text with specific formatting, highlighting the selected character.  The method uses bold font and a specific color for the selected character, and then reverts to the default font and color. ",
        "comment_5": "java Renders a line of text with a specific character highlighted. The method sets the font, draws the characters up to the selected index, highlights the selected character, and then continues drawing the remaining characters. ",
        "comment_6": "This method paints the selected line of text in a HexView. It uses the model to get the characters for the selected line and then draws them on the graphics object.",
        "comment_7": "This method paints the selected line of text in a HexView. It highlights the selected characters within the line using a different color.",
        "comment_8": "This method paints the selected line in the HexView. It highlights the selected character and uses different fonts for the selected and unselected portions of the line.",
        "comment_9": "This method paints the selected portion of a line in a HexView. It uses a bold font for the selected characters and a different color to highlight them.",
        "comment_10": " Paints the selected character in the hex view at the specified coordinates. ",
        "comment_11": "java Paints the selected character in the hex view at the specified x and y coordinates.  It uses the bold font for the selected character and the normal font for the rest of the line. ",
        "comment_12": " Paints the selected character in a line of the hex view at the specified x and y coordinates. ",
        "comment_13": " Paints the selected character in a line of hexadecimal data in a bold font and the rest in a normal font. "
    },
    {
        "method_id": 6338,
        "comment_1": " PDFBOX-3950: test parsing and rendering of truncated file with missing pages.   throws IOException ",
        "method": "\nMethod:\n void testPDFBox3950(){\n    try (PDDocument doc = Loader.loadPDF(new File(TARGETPDFDIR, \"PDFBOX-3950-23EGDHXSBBYQLKYOKGZUOVYVNE675PRD.pdf\"))) {\n        assertEquals(4, doc.getNumberOfPages());\n        PDFRenderer renderer = new PDFRenderer(doc);\n        for (int i = 0; i < doc.getNumberOfPages(); ++i) {\n            try {\n                renderer.renderImage(i);\n            } catch (IOException ex) {\n                if (i == 3 && ex.getMessage().equals(\"Missing descendant font array\")) {\n                    continue;\n                }\n                throw ex;\n            }\n        }\n    }\n}\nComment:\n",
        "project": "pdf",
        "key": "pdf_6338",
        "comment_2": " Tests the PDF document loading and rendering functionality for a specific PDF file.  Verifies that the document has the expected number of pages and attempts to render each page.  Handles a specific known issue for the last page by continuing the rendering process if an expected exception occurs. ",
        "comment_3": " Tests the PDFBox issue PDFBOX-3950 by loading a specific PDF file and verifying it has 4 pages.  Renders each page of the document, handling a specific known exception for the last page.  Ensures that the rendering process does not fail unexpectedly for the given document. ",
        "comment_4": "java Tests the loading and rendering of a specific PDF document, ensuring it has 4 pages and handles a known issue with a missing descendant font array on the fourth page. ",
        "comment_5": " Tests the loading and rendering of a specific PDF document using PDFBox, ensuring it has the expected number of pages.  It attempts to render each page and handles a specific known exception for the last page. ",
        "comment_6": "This method tests PDFBOX-3950 by loading a PDF document, verifying the number of pages, and rendering each page as an image. It handles a specific exception related to a missing font array on the last page.",
        "comment_7": "This method tests the PDFBox library's ability to render a PDF document. It loads a specific PDF file, verifies the number of pages, and attempts to render each page as an image. The method handles a specific exception related to a missing font and continues rendering the remaining pages.",
        "comment_8": "This method tests the PDFBOX-3950-23EGDHXSBBYQLKYOKGZUOVYVNE675PRD.pdf file. It verifies that the PDF document has 4 pages and attempts to render each page as an image. The method handles a specific exception related to a missing font array on the fourth page.",
        "comment_9": "This method tests PDFBOX-3950 by loading a PDF file, verifying the number of pages, and rendering each page. It handles a specific exception related to a missing font array on the last page.",
        "comment_10": " Tests the rendering of a PDF document with 4 pages,   where the fourth page has a missing descendant font array,   using the PDFRenderer to render each page as an image. ",
        "comment_11": "java Tests PDFBOX-3950 by loading a PDF document, asserting the number of pages,   and rendering each page as an image, handling a specific IOException for page 3. ",
        "comment_12": " Tests the PDFBOX-3950 issue by loading a specific PDF file, asserting the number of pages,   and then rendering each page as an image, allowing for a specific IOException on the fourth page. ",
        "comment_13": " Tests the PDFBOX-3950 issue by loading a PDF document and verifying its page count and rendering each page as an image. "
    },
    {
        "method_id": 2756,
        "comment_1": " Get the mac Creator.   return The mac Creator. ",
        "method": "\nMethod:\n String getMacCreator(){\n    COSDictionary params = getCOSObject().getCOSDictionary(COSName.PARAMS);\n    return params != null ? params.getEmbeddedString(COSName.MAC, COSName.CREATOR) : null;\n}\nComment:\n",
        "project": "pdf",
        "key": "pdf_2756",
        "comment_2": " Retrieves the 'Creator' string from the 'Mac' entry within the 'Params' dictionary of the COS object.  Returns the 'Creator' string if it exists, otherwise returns null. ",
        "comment_3": " Retrieves the creator of the MAC from the COSDictionary parameters.   Returns the embedded string associated with the MAC creator if available, otherwise returns null. ",
        "comment_4": " Retrieves the MAC creator string from the COSDictionary parameters if available.  Returns the embedded string associated with the MAC and CREATOR keys, or null if not present. ",
        "comment_5": " Retrieves the 'Creator' string from the 'MAC' entry within the 'Params' dictionary of the COS object.  Returns the embedded string if available, otherwise returns null. ",
        "comment_6": "Retrieves the MAC creator code from the document's parameters dictionary. It returns the creator code as a string if found, otherwise returns null.",
        "comment_7": "This method retrieves the MAC creator code from the document's parameters dictionary. It returns the creator code as a string if found, otherwise it returns null.",
        "comment_8": "This method retrieves the MAC creator code from the document's parameters dictionary. It returns the creator code as a string if found, otherwise returns null.",
        "comment_9": "Retrieves the Mac creator code from the document's parameters. Returns the creator code as a string if found, otherwise returns null.",
        "comment_10": " Returns the creator of the mac from the params dictionary. ",
        "comment_11": " Returns the creator of the MAC (Message Authentication Code)   from the parameters dictionary of the COS object.   Returns null if the creator is not found. ",
        "comment_12": " Returns the creator of the MAC (Message Authentication Code) embedded in the PDF document's parameters. ",
        "comment_13": " Returns the creator of the mac from the params dictionary in the COS object. "
    },
    {
        "method_id": 59200,
        "comment_1": " Return a function that creates new path-matching @code RequestPredicates  from pattern Strings using the given @link PathPatternParser.  <p>This method can be used to specify a non-default, customized  @code PathPatternParser when resolving path patterns.  @param patternParser the parser used to parse patterns given to the returned function  return a function that resolves a pattern String into a path-matching  @code RequestPredicates instance ",
        "method": "\nMethod:\n Function<String,RequestPredicate> pathPredicates(PathPatternParser){\n    Assert.notNull(patternParser, \"PathPatternParser must not be null\");\n    return pattern -> new PathPatternPredicate(patternParser.parse(pattern));\n}\nComment:\n",
        "project": "spring-framework",
        "key": "spring-framework_59200",
        "comment_2": " Creates a function that converts a string path pattern into a RequestPredicate using the provided PathPatternParser.  Ensures the PathPatternParser is not null before proceeding.  The returned function parses the path pattern and constructs a PathPatternPredicate for efficient path matching. ",
        "comment_3": " Returns a function that converts a string pattern into a RequestPredicate using the provided PathPatternParser.  Ensures the PathPatternParser is not null before creating the predicate. ",
        "comment_4": " Returns a function that converts a string pattern into a RequestPredicate using the provided PathPatternParser.  Ensures that the PathPatternParser is not null before creating the predicate. ",
        "comment_5": "java Creates a function that converts a string path pattern into a RequestPredicate using the provided PathPatternParser.  Ensures the PathPatternParser is not null before proceeding. ",
        "comment_6": "This method creates a function that takes a path pattern string and returns a request predicate. The request predicate uses the provided PathPatternParser to parse the path pattern string into a PathPattern object.",
        "comment_7": "This method creates a function that takes a path pattern string and returns a PathPatternPredicate. The PathPatternPredicate is used to match request paths against the given path pattern.",
        "comment_8": "This method creates a function that takes a path pattern string and returns a PathPatternPredicate. The PathPatternPredicate can be used to match request paths against the given path pattern.",
        "comment_9": "This method takes a PathPatternParser and returns a Function that creates a PathPatternPredicate for a given path pattern.",
        "comment_10": " Returns a function that creates a predicate for a given path pattern using the provided PathPatternParser.  The predicate is created by parsing the path pattern using the parser and then creating a PathPatternPredicate.  The parser must not be null. ",
        "comment_11": " Returns a function that creates a predicate from a path pattern using the provided PathPatternParser.  The parser is used to parse the path pattern into an InternalPathPattern,   which is then used to create a PathPatternPredicate. ",
        "comment_12": " Returns a function that creates a PathPatternPredicate for a given path pattern using the provided PathPatternParser. ",
        "comment_13": " Returns a function that creates a PathPatternPredicate from a given path pattern   using the provided PathPatternParser. The parser is used to parse the path   pattern into a PathPattern, which is then used to create the predicate.   The parser must not be null. "
    }
]
